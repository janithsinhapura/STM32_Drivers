
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c28  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e10  08006e10  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000142c  200000fc  08006f14  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001528  08006f14  00021528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d279  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029db  00000000  00000000  0002d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000845  00000000  00000000  00030900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179fc  00000000  00000000  00031145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0ac  00000000  00000000  00048b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085cf1  00000000  00000000  00057bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c64  00000000  00000000  000dd8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e0544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006da4 	.word	0x08006da4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08006da4 	.word	0x08006da4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 f973 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f815 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f87f 	bl	80005e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e2:	f005 ff49 	bl	8006378 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ea:	4806      	ldr	r0, [pc, #24]	; (8000504 <main+0x34>)
 80004ec:	f000 fcad 	bl	8000e4a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f4:	f000 f9d6 	bl	80008a4 <HAL_Delay>
	  x = HAL_GetTick();
 80004f8:	f000 f9c8 	bl	800088c <HAL_GetTick>
 80004fc:	4603      	mov	r3, r0
 80004fe:	607b      	str	r3, [r7, #4]
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000500:	e7f1      	b.n	80004e6 <main+0x16>
 8000502:	bf00      	nop
 8000504:	40020800 	.word	0x40020800

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f006 fc18 	bl	8006d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <SystemClock_Config+0xd0>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <SystemClock_Config+0xd0>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <SystemClock_Config+0xd0>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b23      	ldr	r3, [pc, #140]	; (80005dc <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd4>)
 8000556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800057c:	2319      	movs	r3, #25
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000586:	2304      	movs	r3, #4
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fef0 	bl	8002378 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800059e:	f000 f871 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 f952 	bl	8002868 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ca:	f000 f85b 	bl	8000684 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_GPIO_Init+0x9c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a1f      	ldr	r2, [pc, #124]	; (800067c <MX_GPIO_Init+0x9c>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_GPIO_Init+0x9c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_GPIO_Init+0x9c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <MX_GPIO_Init+0x9c>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_GPIO_Init+0x9c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_GPIO_Init+0x9c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <MX_GPIO_Init+0x9c>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_GPIO_Init+0x9c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <MX_GPIO_Init+0xa0>)
 8000652:	f000 fbe1 	bl	8000e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0xa0>)
 8000670:	f000 fa4e 	bl	8000b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020800 	.word	0x40020800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <HAL_MspInit+0x4c>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <HAL_MspInit+0x4c>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6453      	str	r3, [r2, #68]	; 0x44
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <HAL_MspInit+0x4c>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_MspInit+0x4c>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_MspInit+0x4c>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 f89a 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <OTG_FS_IRQHandler+0x10>)
 800073a:	f000 fcf0 	bl	800111e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000dfc 	.word	0x20000dfc

08000748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SystemInit+0x20>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <SystemInit+0x20>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000772:	490e      	ldr	r1, [pc, #56]	; (80007ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000788:	4c0b      	ldr	r4, [pc, #44]	; (80007b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000796:	f7ff ffd7 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f006 fadf 	bl	8006d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079e:	f7ff fe97 	bl	80004d0 <main>
  bx  lr    
 80007a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80007b0:	08006e18 	.word	0x08006e18
  ldr r2, =_sbss
 80007b4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80007b8:	20001528 	.word	0x20001528

080007bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_Init+0x40>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <HAL_Init+0x40>)
 80007d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_Init+0x40>)
 80007e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f94f 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff ff4c 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023c00 	.word	0x40023c00

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f967 	bl	8000af6 <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f92f 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_IncTick+0x24>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	20000118 	.word	0x20000118

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000118 	.word	0x20000118

080008a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ac:	f7ff ffee 	bl	800088c <HAL_GetTick>
 80008b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	d005      	beq.n	80008ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_Delay+0x44>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ca:	bf00      	nop
 80008cc:	f7ff ffde 	bl	800088c <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8f7      	bhi.n	80008cc <HAL_Delay+0x28>
  {
  }
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <__NVIC_EnableIRQ+0x38>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff8e 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff29 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff3e 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff8e 	bl	80009e0 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5d 	bl	800098c <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff31 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffa2 	bl	8000a48 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	e159      	b.n	8000de0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 8148 	bne.w	8000dda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d005      	beq.n	8000b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d130      	bne.n	8000bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4013      	ands	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	f003 0201 	and.w	r2, r3, #1
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d017      	beq.n	8000c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d123      	bne.n	8000c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	69b9      	ldr	r1, [r7, #24]
 8000c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0203 	and.w	r2, r3, #3
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80a2 	beq.w	8000dda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b57      	ldr	r3, [pc, #348]	; (8000df8 <HAL_GPIO_Init+0x2e8>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a56      	ldr	r2, [pc, #344]	; (8000df8 <HAL_GPIO_Init+0x2e8>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b54      	ldr	r3, [pc, #336]	; (8000df8 <HAL_GPIO_Init+0x2e8>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cb2:	4a52      	ldr	r2, [pc, #328]	; (8000dfc <HAL_GPIO_Init+0x2ec>)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a49      	ldr	r2, [pc, #292]	; (8000e00 <HAL_GPIO_Init+0x2f0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d019      	beq.n	8000d12 <HAL_GPIO_Init+0x202>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a48      	ldr	r2, [pc, #288]	; (8000e04 <HAL_GPIO_Init+0x2f4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d013      	beq.n	8000d0e <HAL_GPIO_Init+0x1fe>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a47      	ldr	r2, [pc, #284]	; (8000e08 <HAL_GPIO_Init+0x2f8>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d00d      	beq.n	8000d0a <HAL_GPIO_Init+0x1fa>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a46      	ldr	r2, [pc, #280]	; (8000e0c <HAL_GPIO_Init+0x2fc>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d007      	beq.n	8000d06 <HAL_GPIO_Init+0x1f6>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a45      	ldr	r2, [pc, #276]	; (8000e10 <HAL_GPIO_Init+0x300>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d101      	bne.n	8000d02 <HAL_GPIO_Init+0x1f2>
 8000cfe:	2304      	movs	r3, #4
 8000d00:	e008      	b.n	8000d14 <HAL_GPIO_Init+0x204>
 8000d02:	2307      	movs	r3, #7
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x204>
 8000d06:	2303      	movs	r3, #3
 8000d08:	e004      	b.n	8000d14 <HAL_GPIO_Init+0x204>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e002      	b.n	8000d14 <HAL_GPIO_Init+0x204>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_Init+0x204>
 8000d12:	2300      	movs	r3, #0
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	f002 0203 	and.w	r2, r2, #3
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	4093      	lsls	r3, r2
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d24:	4935      	ldr	r1, [pc, #212]	; (8000dfc <HAL_GPIO_Init+0x2ec>)
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d32:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d56:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d80:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000daa:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	f67f aea2 	bls.w	8000b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40013c00 	.word	0x40013c00

08000e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e28:	787b      	ldrb	r3, [r7, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e34:	e003      	b.n	8000e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	619a      	str	r2, [r3, #24]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e5c:	887a      	ldrh	r2, [r7, #2]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4013      	ands	r3, r2
 8000e62:	041a      	lsls	r2, r3, #16
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	619a      	str	r2, [r3, #24]
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e80:	b08f      	sub	sp, #60	; 0x3c
 8000e82:	af0a      	add	r7, sp, #40	; 0x28
 8000e84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e10f      	b.n	80010b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d106      	bne.n	8000eb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f005 fc44 	bl	8006738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 ff97 	bl	8002e02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	687e      	ldr	r6, [r7, #4]
 8000edc:	466d      	mov	r5, sp
 8000ede:	f106 0410 	add.w	r4, r6, #16
 8000ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eee:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ef2:	1d33      	adds	r3, r6, #4
 8000ef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef6:	6838      	ldr	r0, [r7, #0]
 8000ef8:	f001 fe6e 	bl	8002bd8 <USB_CoreInit>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d005      	beq.n	8000f0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2202      	movs	r2, #2
 8000f06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e0d0      	b.n	80010b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 ff85 	bl	8002e24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e04a      	b.n	8000fb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4413      	add	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	333d      	adds	r3, #61	; 0x3d
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	333c      	adds	r3, #60	; 0x3c
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	b298      	uxth	r0, r3
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	3344      	adds	r3, #68	; 0x44
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3340      	adds	r3, #64	; 0x40
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	3348      	adds	r3, #72	; 0x48
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	334c      	adds	r3, #76	; 0x4c
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	3354      	adds	r3, #84	; 0x54
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3af      	bcc.n	8000f20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e044      	b.n	8001050 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	3301      	adds	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3b5      	bcc.n	8000fc6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	687e      	ldr	r6, [r7, #4]
 8001062:	466d      	mov	r5, sp
 8001064:	f106 0410 	add.w	r4, r6, #16
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001070:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001074:	e885 0003 	stmia.w	r5, {r0, r1}
 8001078:	1d33      	adds	r3, r6, #4
 800107a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	f001 ff1d 	bl	8002ebc <USB_DevInit>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2202      	movs	r2, #2
 800108c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e00d      	b.n	80010b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 f86c 	bl	8004186 <USB_DevDisconnect>

  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_PCD_Start+0x1c>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e020      	b.n	8001116 <HAL_PCD_Start+0x5e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d109      	bne.n	80010f8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d005      	beq.n	80010f8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fe6f 	bl	8002de0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f003 f81c 	bl	8004144 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800111e:	b590      	push	{r4, r7, lr}
 8001120:	b08d      	sub	sp, #52	; 0x34
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f003 f8da 	bl	80042ee <USB_GetMode>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 848a 	bne.w	8001a56 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f83e 	bl	80041c8 <USB_ReadInterrupts>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8480 	beq.w	8001a54 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f003 f82b 	bl	80041c8 <USB_ReadInterrupts>
 8001172:	4603      	mov	r3, r0
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b02      	cmp	r3, #2
 800117a:	d107      	bne.n	800118c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f002 0202 	and.w	r2, r2, #2
 800118a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f003 f819 	bl	80041c8 <USB_ReadInterrupts>
 8001196:	4603      	mov	r3, r0
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b10      	cmp	r3, #16
 800119e:	d161      	bne.n	8001264 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0210 	bic.w	r2, r2, #16
 80011ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f003 020f 	and.w	r2, r3, #15
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	3304      	adds	r3, #4
 80011ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	0c5b      	lsrs	r3, r3, #17
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d124      	bne.n	8001226 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d035      	beq.n	8001254 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	6a38      	ldr	r0, [r7, #32]
 80011fc:	f002 fe50 	bl	8003ea0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120c:	441a      	add	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	6a1a      	ldr	r2, [r3, #32]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800121e:	441a      	add	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	621a      	str	r2, [r3, #32]
 8001224:	e016      	b.n	8001254 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	0c5b      	lsrs	r3, r3, #17
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	2b06      	cmp	r3, #6
 8001230:	d110      	bne.n	8001254 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001238:	2208      	movs	r2, #8
 800123a:	4619      	mov	r1, r3
 800123c:	6a38      	ldr	r0, [r7, #32]
 800123e:	f002 fe2f 	bl	8003ea0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	6a1a      	ldr	r2, [r3, #32]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800124e:	441a      	add	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0210 	orr.w	r2, r2, #16
 8001262:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f002 ffad 	bl	80041c8 <USB_ReadInterrupts>
 800126e:	4603      	mov	r3, r0
 8001270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001274:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001278:	f040 80a7 	bne.w	80013ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f002 ffb2 	bl	80041ee <USB_ReadDevAllOutEpInterrupt>
 800128a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800128c:	e099      	b.n	80013c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 808e 	beq.w	80013b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 ffd6 	bl	8004256 <USB_ReadDevOutEPInterrupt>
 80012aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00c      	beq.n	80012d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	015a      	lsls	r2, r3, #5
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c2:	461a      	mov	r2, r3
 80012c4:	2301      	movs	r3, #1
 80012c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fec2 	bl	8002054 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	015a      	lsls	r2, r3, #5
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e6:	461a      	mov	r2, r3
 80012e8:	2308      	movs	r3, #8
 80012ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 ff98 	bl	8002224 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4413      	add	r3, r2
 8001306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130a:	461a      	mov	r2, r3
 800130c:	2310      	movs	r3, #16
 800130e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d030      	beq.n	800137c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	2b80      	cmp	r3, #128	; 0x80
 8001324:	d109      	bne.n	800133a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001338:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800133a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	3304      	adds	r3, #4
 800134e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	78db      	ldrb	r3, [r3, #3]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d108      	bne.n	800136a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2200      	movs	r2, #0
 800135c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f005 fae3 	bl	8006930 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001376:	461a      	mov	r2, r3
 8001378:	2302      	movs	r3, #2
 800137a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	2b00      	cmp	r3, #0
 8001384:	d008      	beq.n	8001398 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	4413      	add	r3, r2
 800138e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001392:	461a      	mov	r2, r3
 8001394:	2320      	movs	r3, #32
 8001396:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	015a      	lsls	r2, r3, #5
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	4413      	add	r3, r2
 80013aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ae:	461a      	mov	r2, r3
 80013b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	3301      	adds	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	085b      	lsrs	r3, r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f af62 	bne.w	800128e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fefa 	bl	80041c8 <USB_ReadInterrupts>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013de:	f040 80db 	bne.w	8001598 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 ff1b 	bl	8004222 <USB_ReadDevAllInEpInterrupt>
 80013ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013f2:	e0cd      	b.n	8001590 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80c2 	beq.w	8001584 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f002 ff41 	bl	8004292 <USB_ReadDevInEPInterrupt>
 8001410:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d057      	beq.n	80014cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	2201      	movs	r2, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43db      	mvns	r3, r3
 8001436:	69f9      	ldr	r1, [r7, #28]
 8001438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800143c:	4013      	ands	r3, r2
 800143e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	015a      	lsls	r2, r3, #5
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	4413      	add	r3, r2
 8001448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800144c:	461a      	mov	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d132      	bne.n	80014c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	334c      	adds	r3, #76	; 0x4c
 800146a:	6819      	ldr	r1, [r3, #0]
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001470:	4613      	mov	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4403      	add	r3, r0
 800147a:	3348      	adds	r3, #72	; 0x48
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4419      	add	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4403      	add	r3, r0
 800148e:	334c      	adds	r3, #76	; 0x4c
 8001490:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	2b00      	cmp	r3, #0
 8001496:	d113      	bne.n	80014c0 <HAL_PCD_IRQHandler+0x3a2>
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	3354      	adds	r3, #84	; 0x54
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d108      	bne.n	80014c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014b8:	461a      	mov	r2, r3
 80014ba:	2101      	movs	r1, #1
 80014bc:	f002 ff48 	bl	8004350 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f005 f9b7 	bl	800683a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e2:	461a      	mov	r2, r3
 80014e4:	2308      	movs	r3, #8
 80014e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014fe:	461a      	mov	r2, r3
 8001500:	2310      	movs	r3, #16
 8001502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	015a      	lsls	r2, r3, #5
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4413      	add	r3, r2
 8001516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151a:	461a      	mov	r2, r3
 800151c:	2340      	movs	r3, #64	; 0x40
 800151e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d023      	beq.n	8001572 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800152a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800152c:	6a38      	ldr	r0, [r7, #32]
 800152e:	f001 fe29 	bl	8003184 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	3338      	adds	r3, #56	; 0x38
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	3304      	adds	r3, #4
 8001544:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	78db      	ldrb	r3, [r3, #3]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d108      	bne.n	8001560 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2200      	movs	r2, #0
 8001552:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f005 f9fa 	bl	8006954 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800156c:	461a      	mov	r2, r3
 800156e:	2302      	movs	r3, #2
 8001570:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800157c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fcdb 	bl	8001f3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	3301      	adds	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	2b00      	cmp	r3, #0
 8001594:	f47f af2e 	bne.w	80013f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fe13 	bl	80041c8 <USB_ReadInterrupts>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015ac:	d122      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d108      	bne.n	80015de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015d4:	2100      	movs	r1, #0
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fec2 	bl	8002360 <HAL_PCDEx_LPM_Callback>
 80015dc:	e002      	b.n	80015e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f005 f998 	bl	8006914 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fde5 	bl	80041c8 <USB_ReadInterrupts>
 80015fe:	4603      	mov	r3, r0
 8001600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001608:	d112      	bne.n	8001630 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d102      	bne.n	8001620 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f005 f954 	bl	80068c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800162e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fdc7 	bl	80041c8 <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001644:	f040 80b7 	bne.w	80017b6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2110      	movs	r1, #16
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fd8e 	bl	8003184 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166c:	e046      	b.n	80016fc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167a:	461a      	mov	r2, r3
 800167c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001680:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001692:	0151      	lsls	r1, r2, #5
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	440a      	add	r2, r1
 8001698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800169c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ae:	461a      	mov	r2, r3
 80016b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c6:	0151      	lsls	r1, r2, #5
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	440a      	add	r2, r1
 80016cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e6:	0151      	lsls	r1, r2, #5
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	440a      	add	r2, r1
 80016ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	3301      	adds	r3, #1
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d3b3      	bcc.n	800166e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001714:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001718:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d016      	beq.n	8001750 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001732:	f043 030b 	orr.w	r3, r3, #11
 8001736:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001748:	f043 030b 	orr.w	r3, r3, #11
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	e015      	b.n	800177c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001762:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001766:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001776:	f043 030b 	orr.w	r3, r3, #11
 800177a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800178e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017a0:	461a      	mov	r2, r3
 80017a2:	f002 fdd5 	bl	8004350 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fd04 	bl	80041c8 <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ca:	d124      	bne.n	8001816 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fd9a 	bl	800430a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fd4f 	bl	800327e <USB_GetDevSpeed>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681c      	ldr	r4, [r3, #0]
 80017ec:	f001 f9e8 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 80017f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	4620      	mov	r0, r4
 80017fc:	f001 fa4e 	bl	8002c9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f005 f842 	bl	800688a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001814:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fcd4 	bl	80041c8 <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b08      	cmp	r3, #8
 8001828:	d10a      	bne.n	8001840 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f005 f81f 	bl	800686e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f002 0208 	and.w	r2, r2, #8
 800183e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fcbf 	bl	80041c8 <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001850:	2b80      	cmp	r3, #128	; 0x80
 8001852:	d122      	bne.n	800189a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001860:	2301      	movs	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	e014      	b.n	8001890 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fb27 	bl	8001ed8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	3301      	adds	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	429a      	cmp	r2, r3
 8001898:	d3e5      	bcc.n	8001866 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fc92 	bl	80041c8 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ae:	d13b      	bne.n	8001928 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018b0:	2301      	movs	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	e02b      	b.n	800190e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	4413      	add	r3, r2
 80018be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3340      	adds	r3, #64	; 0x40
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d115      	bne.n	8001908 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da12      	bge.n	8001908 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	333f      	adds	r3, #63	; 0x3f
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fae8 	bl	8001ed8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	429a      	cmp	r2, r3
 8001916:	d3ce      	bcc.n	80018b6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 fc4b 	bl	80041c8 <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800193c:	d155      	bne.n	80019ea <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800193e:	2301      	movs	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e045      	b.n	80019d0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d12e      	bne.n	80019ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800196c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800196e:	2b00      	cmp	r3, #0
 8001970:	da2b      	bge.n	80019ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800197e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001982:	429a      	cmp	r2, r3
 8001984:	d121      	bne.n	80019ca <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c6:	6053      	str	r3, [r2, #4]
            break;
 80019c8:	e007      	b.n	80019da <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3b4      	bcc.n	8001944 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fbea 	bl	80041c8 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fe:	d10a      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f004 ffb9 	bl	8006978 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fbd4 	bl	80041c8 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d115      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f004 ffa9 	bl	8006994 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	e000      	b.n	8001a56 <HAL_PCD_IRQHandler+0x938>
      return;
 8001a54:	bf00      	nop
    }
  }
}
 8001a56:	3734      	adds	r7, #52	; 0x34
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}

08001a5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_PCD_SetAddress+0x1a>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e013      	b.n	8001a9e <HAL_PCD_SetAddress+0x42>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fb32 	bl	80040f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	4608      	mov	r0, r1
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	70fb      	strb	r3, [r7, #3]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	803b      	strh	r3, [r7, #0]
 8001abc:	4613      	mov	r3, r2
 8001abe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da0f      	bge.n	8001aec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 020f 	and.w	r2, r3, #15
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	3338      	adds	r3, #56	; 0x38
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	705a      	strb	r2, [r3, #1]
 8001aea:	e00f      	b.n	8001b0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 020f 	and.w	r2, r3, #15
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	3304      	adds	r3, #4
 8001b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b18:	883a      	ldrh	r2, [r7, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	78ba      	ldrb	r2, [r7, #2]
 8001b22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b36:	78bb      	ldrb	r3, [r7, #2]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d102      	bne.n	8001b42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_PCD_EP_Open+0xaa>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e00e      	b.n	8001b6e <HAL_PCD_EP_Open+0xc8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 fbb2 	bl	80032c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da0f      	bge.n	8001baa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	f003 020f 	and.w	r2, r3, #15
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	3338      	adds	r3, #56	; 0x38
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	705a      	strb	r2, [r3, #1]
 8001ba8:	e00f      	b.n	8001bca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 020f 	and.w	r2, r3, #15
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_PCD_EP_Close+0x6e>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e00e      	b.n	8001c02 <HAL_PCD_EP_Close+0x8c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fbf0 	bl	80033d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	460b      	mov	r3, r1
 8001c18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	f003 020f 	and.w	r2, r3, #15
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2200      	movs	r2, #0
 8001c44:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c66:	7afb      	ldrb	r3, [r7, #11]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	f001 fecf 	bl	8003a20 <USB_EP0StartXfer>
 8001c82:	e008      	b.n	8001c96 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	6979      	ldr	r1, [r7, #20]
 8001c92:	f001 fc7d 	bl	8003590 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
 8001ce2:	f003 020f 	and.w	r2, r3, #15
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	3338      	adds	r3, #56	; 0x38
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d10:	7afb      	ldrb	r3, [r7, #11]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d102      	bne.n	8001d2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6979      	ldr	r1, [r7, #20]
 8001d42:	f001 fe6d 	bl	8003a20 <USB_EP0StartXfer>
 8001d46:	e008      	b.n	8001d5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	6979      	ldr	r1, [r7, #20]
 8001d56:	f001 fc1b 	bl	8003590 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d901      	bls.n	8001d82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e050      	b.n	8001e24 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da0f      	bge.n	8001daa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	3338      	adds	r3, #56	; 0x38
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3304      	adds	r3, #4
 8001da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	705a      	strb	r2, [r3, #1]
 8001da8:	e00d      	b.n	8001dc6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_PCD_EP_SetStall+0x82>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e01e      	b.n	8001e24 <HAL_PCD_EP_SetStall+0xc0>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 f8ab 	bl	8003f50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e14:	461a      	mov	r2, r3
 8001e16:	f002 fa9b 	bl	8004350 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 020f 	and.w	r2, r3, #15
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d901      	bls.n	8001e4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e042      	b.n	8001ed0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da0f      	bge.n	8001e72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	3338      	adds	r3, #56	; 0x38
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	705a      	strb	r2, [r3, #1]
 8001e70:	e00f      	b.n	8001e92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 020f 	and.w	r2, r3, #15
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_PCD_EP_ClrStall+0x86>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e00e      	b.n	8001ed0 <HAL_PCD_EP_ClrStall+0xa4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 f8b3 	bl	800402c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da0c      	bge.n	8001f06 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	3338      	adds	r3, #56	; 0x38
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e00c      	b.n	8001f20 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fed2 	bl	8003cd0 <USB_EPStopXfer>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f30:	7afb      	ldrb	r3, [r7, #11]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b08a      	sub	sp, #40	; 0x28
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3338      	adds	r3, #56	; 0x38
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a1a      	ldr	r2, [r3, #32]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d901      	bls.n	8001f72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e06c      	b.n	800204c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d902      	bls.n	8001f8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3303      	adds	r3, #3
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f96:	e02b      	b.n	8001ff0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d902      	bls.n	8001fb4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	3303      	adds	r3, #3
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6919      	ldr	r1, [r3, #16]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f001 ff26 	bl	8003e24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	441a      	add	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	441a      	add	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	429a      	cmp	r2, r3
 8002004:	d809      	bhi.n	800201a <PCD_WriteEmptyTxFifo+0xe0>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a1a      	ldr	r2, [r3, #32]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800200e:	429a      	cmp	r2, r3
 8002010:	d203      	bcs.n	800201a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1be      	bne.n	8001f98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	429a      	cmp	r2, r3
 8002024:	d811      	bhi.n	800204a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	2201      	movs	r2, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	43db      	mvns	r3, r3
 8002040:	6939      	ldr	r1, [r7, #16]
 8002042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002046:	4013      	ands	r3, r2
 8002048:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	333c      	adds	r3, #60	; 0x3c
 800206c:	3304      	adds	r3, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d17b      	bne.n	8002182 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4a61      	ldr	r2, [pc, #388]	; (800221c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	f240 80b9 	bls.w	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80b3 	beq.w	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	461a      	mov	r2, r3
 80020b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020bc:	6093      	str	r3, [r2, #8]
 80020be:	e0a7      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d6:	461a      	mov	r2, r3
 80020d8:	2320      	movs	r3, #32
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	e098      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 8093 	bne.w	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	4a4b      	ldr	r2, [pc, #300]	; (800221c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d90f      	bls.n	8002112 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800210e:	6093      	str	r3, [r2, #8]
 8002110:	e07e      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	0159      	lsls	r1, r3, #5
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	440b      	add	r3, r1
 8002134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d114      	bne.n	8002174 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800215c:	461a      	mov	r2, r3
 800215e:	2101      	movs	r1, #1
 8002160:	f002 f8f6 	bl	8004350 <USB_EP0_OutStart>
 8002164:	e006      	b.n	8002174 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	441a      	add	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f004 fb42 	bl	8006804 <HAL_PCD_DataOutStageCallback>
 8002180:	e046      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d124      	bne.n	80021d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	e032      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c0:	461a      	mov	r2, r3
 80021c2:	2320      	movs	r3, #32
 80021c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f004 fb19 	bl	8006804 <HAL_PCD_DataOutStageCallback>
 80021d2:	e01d      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d114      	bne.n	8002204 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d108      	bne.n	8002204 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021fc:	461a      	mov	r2, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	f002 f8a6 	bl	8004350 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4619      	mov	r1, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f004 fafa 	bl	8006804 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	4f54300a 	.word	0x4f54300a
 8002220:	4f54310a 	.word	0x4f54310a

08002224 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	333c      	adds	r3, #60	; 0x3c
 800223c:	3304      	adds	r3, #4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d90e      	bls.n	8002278 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002270:	461a      	mov	r2, r3
 8002272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002276:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f004 fab1 	bl	80067e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d90c      	bls.n	80022a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002298:	461a      	mov	r2, r3
 800229a:	2101      	movs	r1, #1
 800229c:	f002 f858 	bl	8004350 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	4f54300a 	.word	0x4f54300a

080022b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
 80022bc:	4613      	mov	r3, r2
 80022be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022ce:	883b      	ldrh	r3, [r7, #0]
 80022d0:	0419      	lsls	r1, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	430a      	orrs	r2, r1
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
 80022dc:	e028      	b.n	8002330 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4413      	add	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e00d      	b.n	800230e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3340      	adds	r3, #64	; 0x40
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4413      	add	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	3301      	adds	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	3b01      	subs	r3, #1
 8002314:	429a      	cmp	r2, r3
 8002316:	d3ec      	bcc.n	80022f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002318:	883b      	ldrh	r3, [r7, #0]
 800231a:	0418      	lsls	r0, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	3b01      	subs	r3, #1
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	4302      	orrs	r2, r0
 8002328:	3340      	adds	r3, #64	; 0x40
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e267      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d075      	beq.n	8002482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d00c      	beq.n	80023bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d112      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05b      	beq.n	8002480 <HAL_RCC_OscConfig+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d157      	bne.n	8002480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e242      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x74>
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a75      	ldr	r2, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x98>
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6f      	ldr	r2, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6c      	ldr	r2, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 8002410:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a68      	ldr	r2, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fa2c 	bl	800088c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe fa28 	bl	800088c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e207      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xc0>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fa18 	bl	800088c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fa14 	bl	800088c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1f3      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0xe8>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1c7      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4937      	ldr	r1, [pc, #220]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_RCC_OscConfig+0x244>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe f9cd 	bl	800088c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe f9c9 	bl	800088c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1a8      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4925      	ldr	r1, [pc, #148]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x244>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe f9ac 	bl	800088c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe f9a8 	bl	800088c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e187      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d036      	beq.n	80025d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCC_OscConfig+0x248>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe f98c 	bl	800088c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe f988 	bl	800088c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e167      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x200>
 8002596:	e01b      	b.n	80025d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_OscConfig+0x248>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe f975 	bl	800088c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	e00e      	b.n	80025c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe f971 	bl	800088c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d907      	bls.n	80025c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e150      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	42470000 	.word	0x42470000
 80025c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ea      	bne.n	80025a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8097 	beq.w	800270c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b81      	ldr	r3, [pc, #516]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b7d      	ldr	r3, [pc, #500]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a7c      	ldr	r2, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b7a      	ldr	r3, [pc, #488]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b77      	ldr	r3, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b74      	ldr	r3, [pc, #464]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a73      	ldr	r2, [pc, #460]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe f931 	bl	800088c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe f92d 	bl	800088c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e10c      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x2ea>
 8002654:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	e01c      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x30c>
 800266a:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a5e      	ldr	r2, [pc, #376]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a5b      	ldr	r2, [pc, #364]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe f8f2 	bl	800088c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe f8ee 	bl	800088c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0cb      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c2:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0ee      	beq.n	80026ac <HAL_RCC_OscConfig+0x334>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe f8dc 	bl	800088c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe f8d8 	bl	800088c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0b5      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ee      	bne.n	80026d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002700:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a1 	beq.w	8002858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b08      	cmp	r3, #8
 8002720:	d05c      	beq.n	80027dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d141      	bne.n	80027ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe f8ac 	bl	800088c <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe f8a8 	bl	800088c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e087      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	3b01      	subs	r3, #1
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	491b      	ldr	r1, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe f881 	bl	800088c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe f87d 	bl	800088c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e05c      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x416>
 80027ac:	e054      	b.n	8002858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe f86a 	bl	800088c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe f866 	bl	800088c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e045      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x444>
 80027da:	e03d      	b.n	8002858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e038      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000
 80027f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x4ec>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d028      	beq.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d121      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d11a      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800282a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800282c:	4293      	cmp	r3, r2
 800282e:	d111      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d107      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0cc      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d90c      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d044      	beq.n	8002988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d119      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d003      	beq.n	8002926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	2b03      	cmp	r3, #3
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e067      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4934      	ldr	r1, [pc, #208]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002958:	f7fd ff98 	bl	800088c <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fd ff94 	bl	800088c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e04f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 020c 	and.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d1eb      	bne.n	8002960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d20c      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	490a      	ldr	r1, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fef8 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00
 8002a24:	40023800 	.word	0x40023800
 8002a28:	08006df8 	.word	0x08006df8
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a38:	b090      	sub	sp, #64	; 0x40
 8002a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a40:	2300      	movs	r3, #0
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a44:	2300      	movs	r3, #0
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d00d      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x40>
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	f200 80a1 	bhi.w	8002ba0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a66:	e09b      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a6c:	e09b      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6e:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002a70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a72:	e098      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a74:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7e:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d028      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	2200      	movs	r2, #0
 8002a92:	623b      	str	r3, [r7, #32]
 8002a94:	627a      	str	r2, [r7, #36]	; 0x24
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa0:	fb03 f201 	mul.w	r2, r3, r1
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a43      	ldr	r2, [pc, #268]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002aae:	fba0 1202 	umull	r1, r2, r0, r2
 8002ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aba:	4413      	add	r3, r2
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	61fa      	str	r2, [r7, #28]
 8002ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ace:	f7fd fb81 	bl	80001d4 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ada:	e053      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002adc:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	617a      	str	r2, [r7, #20]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aee:	f04f 0b00 	mov.w	fp, #0
 8002af2:	4652      	mov	r2, sl
 8002af4:	465b      	mov	r3, fp
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b04:	0150      	lsls	r0, r2, #5
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b0e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b26:	ebb2 0408 	subs.w	r4, r2, r8
 8002b2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	00eb      	lsls	r3, r5, #3
 8002b38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3c:	00e2      	lsls	r2, r4, #3
 8002b3e:	4614      	mov	r4, r2
 8002b40:	461d      	mov	r5, r3
 8002b42:	eb14 030a 	adds.w	r3, r4, sl
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	eb45 030b 	adc.w	r3, r5, fp
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	028b      	lsls	r3, r1, #10
 8002b5e:	4621      	mov	r1, r4
 8002b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b64:	4621      	mov	r1, r4
 8002b66:	028a      	lsls	r2, r1, #10
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	60fa      	str	r2, [r7, #12]
 8002b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b78:	f7fd fb2c 	bl	80001d4 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4613      	mov	r3, r2
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b9e:	e002      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ba2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3740      	adds	r7, #64	; 0x40
 8002bac:	46bd      	mov	sp, r7
 8002bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	017d7840 	.word	0x017d7840

08002bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bd8:	b084      	sub	sp, #16
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	f107 001c 	add.w	r0, r7, #28
 8002be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d122      	bne.n	8002c36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d105      	bne.n	8002c2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f001 fbee 	bl	800440c <USB_CoreReset>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e01a      	b.n	8002c6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f001 fbe2 	bl	800440c <USB_CoreReset>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c5e:	e005      	b.n	8002c6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10b      	bne.n	8002c8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f043 0206 	orr.w	r2, r3, #6
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c96:	b004      	add	sp, #16
 8002c98:	4770      	bx	lr
	...

08002c9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d165      	bne.n	8002d7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4a41      	ldr	r2, [pc, #260]	; (8002db8 <USB_SetTurnaroundTime+0x11c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d906      	bls.n	8002cc6 <USB_SetTurnaroundTime+0x2a>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4a40      	ldr	r2, [pc, #256]	; (8002dbc <USB_SetTurnaroundTime+0x120>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d202      	bcs.n	8002cc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	e062      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <USB_SetTurnaroundTime+0x120>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d306      	bcc.n	8002cdc <USB_SetTurnaroundTime+0x40>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4a3b      	ldr	r2, [pc, #236]	; (8002dc0 <USB_SetTurnaroundTime+0x124>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d202      	bcs.n	8002cdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cd6:	230e      	movs	r3, #14
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e057      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4a38      	ldr	r2, [pc, #224]	; (8002dc0 <USB_SetTurnaroundTime+0x124>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d306      	bcc.n	8002cf2 <USB_SetTurnaroundTime+0x56>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4a37      	ldr	r2, [pc, #220]	; (8002dc4 <USB_SetTurnaroundTime+0x128>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d202      	bcs.n	8002cf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002cec:	230d      	movs	r3, #13
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e04c      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4a33      	ldr	r2, [pc, #204]	; (8002dc4 <USB_SetTurnaroundTime+0x128>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d306      	bcc.n	8002d08 <USB_SetTurnaroundTime+0x6c>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4a32      	ldr	r2, [pc, #200]	; (8002dc8 <USB_SetTurnaroundTime+0x12c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d802      	bhi.n	8002d08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d02:	230c      	movs	r3, #12
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e041      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4a2f      	ldr	r2, [pc, #188]	; (8002dc8 <USB_SetTurnaroundTime+0x12c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d906      	bls.n	8002d1e <USB_SetTurnaroundTime+0x82>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <USB_SetTurnaroundTime+0x130>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d802      	bhi.n	8002d1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d18:	230b      	movs	r3, #11
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	e036      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <USB_SetTurnaroundTime+0x130>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d906      	bls.n	8002d34 <USB_SetTurnaroundTime+0x98>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <USB_SetTurnaroundTime+0x134>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d802      	bhi.n	8002d34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d2e:	230a      	movs	r3, #10
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e02b      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <USB_SetTurnaroundTime+0x134>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d906      	bls.n	8002d4a <USB_SetTurnaroundTime+0xae>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <USB_SetTurnaroundTime+0x138>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d202      	bcs.n	8002d4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d44:	2309      	movs	r3, #9
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e020      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <USB_SetTurnaroundTime+0x138>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d306      	bcc.n	8002d60 <USB_SetTurnaroundTime+0xc4>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <USB_SetTurnaroundTime+0x13c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d802      	bhi.n	8002d60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e015      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <USB_SetTurnaroundTime+0x13c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d906      	bls.n	8002d76 <USB_SetTurnaroundTime+0xda>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <USB_SetTurnaroundTime+0x140>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d202      	bcs.n	8002d76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d70:	2307      	movs	r3, #7
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e00a      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d76:	2306      	movs	r3, #6
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e007      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d82:	2309      	movs	r3, #9
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e001      	b.n	8002d8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d88:	2309      	movs	r3, #9
 8002d8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	029b      	lsls	r3, r3, #10
 8002da0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002da4:	431a      	orrs	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	00d8acbf 	.word	0x00d8acbf
 8002dbc:	00e4e1c0 	.word	0x00e4e1c0
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	01067380 	.word	0x01067380
 8002dc8:	011a499f 	.word	0x011a499f
 8002dcc:	01312cff 	.word	0x01312cff
 8002dd0:	014ca43f 	.word	0x014ca43f
 8002dd4:	016e3600 	.word	0x016e3600
 8002dd8:	01a6ab1f 	.word	0x01a6ab1f
 8002ddc:	01e84800 	.word	0x01e84800

08002de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d115      	bne.n	8002e72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e52:	2001      	movs	r0, #1
 8002e54:	f7fd fd26 	bl	80008a4 <HAL_Delay>
      ms++;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f001 fa45 	bl	80042ee <USB_GetMode>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d01e      	beq.n	8002ea8 <USB_SetCurrentMode+0x84>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b31      	cmp	r3, #49	; 0x31
 8002e6e:	d9f0      	bls.n	8002e52 <USB_SetCurrentMode+0x2e>
 8002e70:	e01a      	b.n	8002ea8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d115      	bne.n	8002ea4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f7fd fd0d 	bl	80008a4 <HAL_Delay>
      ms++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f001 fa2c 	bl	80042ee <USB_GetMode>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <USB_SetCurrentMode+0x84>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b31      	cmp	r3, #49	; 0x31
 8002ea0:	d9f0      	bls.n	8002e84 <USB_SetCurrentMode+0x60>
 8002ea2:	e001      	b.n	8002ea8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e005      	b.n	8002eb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b32      	cmp	r3, #50	; 0x32
 8002eac:	d101      	bne.n	8002eb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	e009      	b.n	8002ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	3340      	adds	r3, #64	; 0x40
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	3301      	adds	r3, #1
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0e      	cmp	r3, #14
 8002ef4:	d9f2      	bls.n	8002edc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11c      	bne.n	8002f36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
 8002f34:	e00b      	b.n	8002f4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f54:	461a      	mov	r2, r3
 8002f56:	2300      	movs	r3, #0
 8002f58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f60:	4619      	mov	r1, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f68:	461a      	mov	r2, r3
 8002f6a:	680b      	ldr	r3, [r1, #0]
 8002f6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10c      	bne.n	8002f8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f965 	bl	800324c <USB_SetDevSpeed>
 8002f82:	e008      	b.n	8002f96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f84:	2101      	movs	r1, #1
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f960 	bl	800324c <USB_SetDevSpeed>
 8002f8c:	e003      	b.n	8002f96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f8e:	2103      	movs	r1, #3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f95b 	bl	800324c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f96:	2110      	movs	r1, #16
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f8f3 	bl	8003184 <USB_FlushTxFifo>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f91f 	bl	80031ec <USB_FlushRxFifo>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e043      	b.n	800306a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff8:	d118      	bne.n	800302c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300c:	461a      	mov	r2, r3
 800300e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e013      	b.n	800303e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003022:	461a      	mov	r2, r3
 8003024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e008      	b.n	800303e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	461a      	mov	r2, r3
 800303a:	2300      	movs	r3, #0
 800303c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304a:	461a      	mov	r2, r3
 800304c:	2300      	movs	r3, #0
 800304e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	461a      	mov	r2, r3
 800305e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	3301      	adds	r3, #1
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	429a      	cmp	r2, r3
 8003070:	d3b7      	bcc.n	8002fe2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	e043      	b.n	8003100 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800308a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800308e:	d118      	bne.n	80030c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	461a      	mov	r2, r3
 80030a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e013      	b.n	80030d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b8:	461a      	mov	r2, r3
 80030ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	e008      	b.n	80030d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	2300      	movs	r3, #0
 80030d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e0:	461a      	mov	r2, r3
 80030e2:	2300      	movs	r3, #0
 80030e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f2:	461a      	mov	r2, r3
 80030f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	3301      	adds	r3, #1
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	429a      	cmp	r2, r3
 8003106:	d3b7      	bcc.n	8003078 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003128:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <USB_DevInit+0x2c4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f043 0208 	orr.w	r2, r3, #8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003170:	7dfb      	ldrb	r3, [r7, #23]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800317c:	b004      	add	sp, #16
 800317e:	4770      	bx	lr
 8003180:	803c3800 	.word	0x803c3800

08003184 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3301      	adds	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <USB_FlushTxFifo+0x64>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e01b      	b.n	80031dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	daf2      	bge.n	8003192 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	019b      	lsls	r3, r3, #6
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <USB_FlushTxFifo+0x64>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e006      	b.n	80031dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d0f0      	beq.n	80031bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	00030d40 	.word	0x00030d40

080031ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <USB_FlushRxFifo+0x5c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e018      	b.n	800323c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	daf2      	bge.n	80031f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2210      	movs	r2, #16
 800321a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3301      	adds	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a08      	ldr	r2, [pc, #32]	; (8003248 <USB_FlushRxFifo+0x5c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e006      	b.n	800323c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b10      	cmp	r3, #16
 8003238:	d0f0      	beq.n	800321c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	00030d40 	.word	0x00030d40

0800324c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	68f9      	ldr	r1, [r7, #12]
 8003268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800327e:	b480      	push	{r7}
 8003280:	b087      	sub	sp, #28
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0306 	and.w	r3, r3, #6
 8003296:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]
 80032a2:	e00a      	b.n	80032ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d002      	beq.n	80032b0 <USB_GetDevSpeed+0x32>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d102      	bne.n	80032b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032b0:	2302      	movs	r3, #2
 80032b2:	75fb      	strb	r3, [r7, #23]
 80032b4:	e001      	b.n	80032ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032b6:	230f      	movs	r3, #15
 80032b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	785b      	ldrb	r3, [r3, #1]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d13a      	bne.n	800335a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	68f9      	ldr	r1, [r7, #12]
 80032fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003302:	4313      	orrs	r3, r2
 8003304:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d155      	bne.n	80033c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	791b      	ldrb	r3, [r3, #4]
 8003336:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003338:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	059b      	lsls	r3, r3, #22
 800333e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003340:	4313      	orrs	r3, r2
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	440a      	add	r2, r1
 800334a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e036      	b.n	80033c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003378:	4313      	orrs	r3, r2
 800337a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d11a      	bne.n	80033c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	791b      	ldrb	r3, [r3, #4]
 80033ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033ae:	430b      	orrs	r3, r1
 80033b0:	4313      	orrs	r3, r2
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	0151      	lsls	r1, r2, #5
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	440a      	add	r2, r1
 80033ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d161      	bne.n	80034b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340a:	d11f      	bne.n	800344c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	0151      	lsls	r1, r2, #5
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	440a      	add	r2, r1
 8003422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800342a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	0151      	lsls	r1, r2, #5
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	440a      	add	r2, r1
 8003442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800344a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	2101      	movs	r1, #1
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	b29b      	uxth	r3, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800346c:	4013      	ands	r3, r2
 800346e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	b29b      	uxth	r3, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	68f9      	ldr	r1, [r7, #12]
 800348c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003490:	4013      	ands	r3, r2
 8003492:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	0159      	lsls	r1, r3, #5
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	440b      	add	r3, r1
 80034aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ae:	4619      	mov	r1, r3
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <USB_DeactivateEndpoint+0x1b0>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
 80034b6:	e060      	b.n	800357a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ce:	d11f      	bne.n	8003510 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	0151      	lsls	r1, r2, #5
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	440a      	add	r2, r1
 80034e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	440a      	add	r2, r1
 8003506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800350a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800350e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	43db      	mvns	r3, r3
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003530:	4013      	ands	r3, r2
 8003532:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	2101      	movs	r1, #1
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	43db      	mvns	r3, r3
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003554:	4013      	ands	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	0159      	lsls	r1, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	440b      	add	r3, r1
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	4619      	mov	r1, r3
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <USB_DeactivateEndpoint+0x1b4>)
 8003576:	4013      	ands	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	ec337800 	.word	0xec337800
 800358c:	eff37800 	.word	0xeff37800

08003590 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	f040 815c 	bne.w	800386a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d132      	bne.n	8003620 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	0151      	lsls	r1, r2, #5
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	440a      	add	r2, r1
 80035f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003618:	0cdb      	lsrs	r3, r3, #19
 800361a:	04db      	lsls	r3, r3, #19
 800361c:	6113      	str	r3, [r2, #16]
 800361e:	e074      	b.n	800370a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	0151      	lsls	r1, r2, #5
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	440a      	add	r2, r1
 8003636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363a:	0cdb      	lsrs	r3, r3, #19
 800363c:	04db      	lsls	r3, r3, #19
 800363e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	0151      	lsls	r1, r2, #5
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	440a      	add	r2, r1
 8003656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800365e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003662:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6999      	ldr	r1, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	440b      	add	r3, r1
 800367c:	1e59      	subs	r1, r3, #1
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	fbb1 f3f3 	udiv	r3, r1, r3
 8003686:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003688:	4b9d      	ldr	r3, [pc, #628]	; (8003900 <USB_EPStartXfer+0x370>)
 800368a:	400b      	ands	r3, r1
 800368c:	69b9      	ldr	r1, [r7, #24]
 800368e:	0148      	lsls	r0, r1, #5
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	4401      	add	r1, r0
 8003694:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003698:	4313      	orrs	r3, r2
 800369a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	0148      	lsls	r0, r1, #5
 80036b6:	69f9      	ldr	r1, [r7, #28]
 80036b8:	4401      	add	r1, r0
 80036ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036be:	4313      	orrs	r3, r2
 80036c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	791b      	ldrb	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d11f      	bne.n	800370a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003704:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003708:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d14b      	bne.n	80037a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	791b      	ldrb	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d128      	bne.n	8003786 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d110      	bne.n	8003766 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800375e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e00f      	b.n	8003786 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	0151      	lsls	r1, r2, #5
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	440a      	add	r2, r1
 800377c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	0151      	lsls	r1, r2, #5
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	440a      	add	r2, r1
 800379c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e133      	b.n	8003a10 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	791b      	ldrb	r3, [r3, #4]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d015      	beq.n	80037fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 811b 	beq.w	8003a10 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	2101      	movs	r1, #1
 80037ec:	fa01 f303 	lsl.w	r3, r1, r3
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037f6:	4313      	orrs	r3, r2
 80037f8:	634b      	str	r3, [r1, #52]	; 0x34
 80037fa:	e109      	b.n	8003a10 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d110      	bne.n	800382e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	0151      	lsls	r1, r2, #5
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	440a      	add	r2, r1
 8003822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e00f      	b.n	800384e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	440a      	add	r2, r1
 8003844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	b298      	uxth	r0, r3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	4603      	mov	r3, r0
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fade 	bl	8003e24 <USB_WritePacket>
 8003868:	e0d2      	b.n	8003a10 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	440a      	add	r2, r1
 8003880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003884:	0cdb      	lsrs	r3, r3, #19
 8003886:	04db      	lsls	r3, r3, #19
 8003888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	0151      	lsls	r1, r2, #5
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	440a      	add	r2, r1
 80038a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d126      	bne.n	8003904 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038cc:	69b9      	ldr	r1, [r7, #24]
 80038ce:	0148      	lsls	r0, r1, #5
 80038d0:	69f9      	ldr	r1, [r7, #28]
 80038d2:	4401      	add	r1, r0
 80038d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	0151      	lsls	r1, r2, #5
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	440a      	add	r2, r1
 80038f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038fa:	6113      	str	r3, [r2, #16]
 80038fc:	e03a      	b.n	8003974 <USB_EPStartXfer+0x3e4>
 80038fe:	bf00      	nop
 8003900:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4413      	add	r3, r2
 800390e:	1e5a      	subs	r2, r3, #1
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	8afa      	ldrh	r2, [r7, #22]
 8003920:	fb03 f202 	mul.w	r2, r3, r2
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	8afb      	ldrh	r3, [r7, #22]
 8003938:	04d9      	lsls	r1, r3, #19
 800393a:	4b38      	ldr	r3, [pc, #224]	; (8003a1c <USB_EPStartXfer+0x48c>)
 800393c:	400b      	ands	r3, r1
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	0148      	lsls	r0, r1, #5
 8003942:	69f9      	ldr	r1, [r7, #28]
 8003944:	4401      	add	r1, r0
 8003946:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800394a:	4313      	orrs	r3, r2
 800394c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003964:	69b9      	ldr	r1, [r7, #24]
 8003966:	0148      	lsls	r0, r1, #5
 8003968:	69f9      	ldr	r1, [r7, #28]
 800396a:	4401      	add	r1, r0
 800396c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003970:	4313      	orrs	r3, r2
 8003972:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10d      	bne.n	8003996 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6919      	ldr	r1, [r3, #16]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	460a      	mov	r2, r1
 8003994:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	791b      	ldrb	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d128      	bne.n	80039f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d110      	bne.n	80039d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	0151      	lsls	r1, r2, #5
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	440a      	add	r2, r1
 80039c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e00f      	b.n	80039f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	0151      	lsls	r1, r2, #5
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	440a      	add	r2, r1
 8003a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	1ff80000 	.word	0x1ff80000

08003a20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f040 80ce 	bne.w	8003bde <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d132      	bne.n	8003ab0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	0151      	lsls	r1, r2, #5
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	440a      	add	r2, r1
 8003a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	0151      	lsls	r1, r2, #5
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	440a      	add	r2, r1
 8003a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	0151      	lsls	r1, r2, #5
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	440a      	add	r2, r1
 8003aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa8:	0cdb      	lsrs	r3, r3, #19
 8003aaa:	04db      	lsls	r3, r3, #19
 8003aac:	6113      	str	r3, [r2, #16]
 8003aae:	e04e      	b.n	8003b4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aca:	0cdb      	lsrs	r3, r3, #19
 8003acc:	04db      	lsls	r3, r3, #19
 8003ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d903      	bls.n	8003b08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	0151      	lsls	r1, r2, #5
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3e:	6939      	ldr	r1, [r7, #16]
 8003b40:	0148      	lsls	r0, r1, #5
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	4401      	add	r1, r0
 8003b46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d11e      	bne.n	8003b92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	0151      	lsls	r1, r2, #5
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	440a      	add	r2, r1
 8003b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e097      	b.n	8003cc2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	0151      	lsls	r1, r2, #5
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bb0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8083 	beq.w	8003cc2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	6979      	ldr	r1, [r7, #20]
 8003bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	634b      	str	r3, [r1, #52]	; 0x34
 8003bdc:	e071      	b.n	8003cc2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bf8:	0cdb      	lsrs	r3, r3, #19
 8003bfa:	04db      	lsls	r3, r3, #19
 8003bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	0151      	lsls	r1, r2, #5
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	440a      	add	r2, r1
 8003c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c70:	6939      	ldr	r1, [r7, #16]
 8003c72:	0148      	lsls	r0, r1, #5
 8003c74:	6979      	ldr	r1, [r7, #20]
 8003c76:	4401      	add	r1, r0
 8003c78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10d      	bne.n	8003ca2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6919      	ldr	r1, [r3, #16]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	785b      	ldrb	r3, [r3, #1]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d14a      	bne.n	8003d84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d06:	f040 8086 	bne.w	8003e16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	7812      	ldrb	r2, [r2, #0]
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3301      	adds	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d902      	bls.n	8003d68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
          break;
 8003d66:	e056      	b.n	8003e16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d80:	d0e7      	beq.n	8003d52 <USB_EPStopXfer+0x82>
 8003d82:	e048      	b.n	8003e16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d9c:	d13b      	bne.n	8003e16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3301      	adds	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f242 7210 	movw	r2, #10000	; 0x2710
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d902      	bls.n	8003dfc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	75fb      	strb	r3, [r7, #23]
          break;
 8003dfa:	e00c      	b.n	8003e16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e14:	d0e7      	beq.n	8003de6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b089      	sub	sp, #36	; 0x24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	461a      	mov	r2, r3
 8003e32:	460b      	mov	r3, r1
 8003e34:	71fb      	strb	r3, [r7, #7]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d123      	bne.n	8003e92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e4a:	88bb      	ldrh	r3, [r7, #4]
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e018      	b.n	8003e8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	031a      	lsls	r2, r3, #12
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	461a      	mov	r2, r3
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3301      	adds	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	3301      	adds	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d3e2      	bcc.n	8003e58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3724      	adds	r7, #36	; 0x24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b08b      	sub	sp, #44	; 0x2c
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	e014      	b.n	8003ef6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	3301      	adds	r3, #1
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	3301      	adds	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	623b      	str	r3, [r7, #32]
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3e6      	bcc.n	8003ecc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003efe:	8bfb      	ldrh	r3, [r7, #30]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01e      	beq.n	8003f42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f107 0310 	add.w	r3, r7, #16
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	701a      	strb	r2, [r3, #0]
      i++;
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	3301      	adds	r3, #1
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003f36:	8bfb      	ldrh	r3, [r7, #30]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f3c:	8bfb      	ldrh	r3, [r7, #30]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ea      	bne.n	8003f18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	372c      	adds	r7, #44	; 0x2c
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d12c      	bne.n	8003fc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	db12      	blt.n	8003fa4 <USB_EPSetStall+0x54>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00f      	beq.n	8003fa4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	0151      	lsls	r1, r2, #5
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	440a      	add	r2, r1
 8003f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fa2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e02b      	b.n	800401e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	db12      	blt.n	8003ffe <USB_EPSetStall+0xae>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00f      	beq.n	8003ffe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ffc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800401c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d128      	bne.n	800409a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004066:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d003      	beq.n	8004078 <USB_EPClearStall+0x4c>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	791b      	ldrb	r3, [r3, #4]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d138      	bne.n	80040ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e027      	b.n	80040ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	791b      	ldrb	r3, [r3, #4]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d003      	beq.n	80040ca <USB_EPClearStall+0x9e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	791b      	ldrb	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d10f      	bne.n	80040ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004116:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800411a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004172:	f023 0302 	bic.w	r3, r3, #2
 8004176:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041a0:	f023 0303 	bic.w	r3, r3, #3
 80041a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4013      	ands	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	0c1b      	lsrs	r3, r3, #16
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	b29b      	uxth	r3, r3
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004284:	68bb      	ldr	r3, [r7, #8]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004292:	b480      	push	{r7}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	fa22 f303 	lsr.w	r3, r2, r3
 80042c2:	01db      	lsls	r3, r3, #7
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4013      	ands	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042e0:	68bb      	ldr	r3, [r7, #8]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0301 	and.w	r3, r3, #1
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004324:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004328:	f023 0307 	bic.w	r3, r3, #7
 800432c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	460b      	mov	r3, r1
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	333c      	adds	r3, #60	; 0x3c
 8004366:	3304      	adds	r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4a26      	ldr	r2, [pc, #152]	; (8004408 <USB_EP0_OutStart+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d90a      	bls.n	800438a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004384:	d101      	bne.n	800438a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e037      	b.n	80043fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b8:	f043 0318 	orr.w	r3, r3, #24
 80043bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80043d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80043d2:	7afb      	ldrb	r3, [r7, #11]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10f      	bne.n	80043f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043de:	461a      	mov	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80043f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	4f54300a 	.word	0x4f54300a

0800440c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <USB_CoreReset+0x64>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e01b      	b.n	8004462 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	daf2      	bge.n	8004418 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f043 0201 	orr.w	r2, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a09      	ldr	r2, [pc, #36]	; (8004470 <USB_CoreReset+0x64>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e006      	b.n	8004462 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d0f0      	beq.n	8004442 <USB_CoreReset+0x36>

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	00030d40 	.word	0x00030d40

08004474 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004480:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004484:	f002 fc1e 	bl	8006cc4 <USBD_static_malloc>
 8004488:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	32b0      	adds	r2, #176	; 0xb0
 800449a:	2100      	movs	r1, #0
 800449c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0d4      	b.n	800464e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80044a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80044a8:	2100      	movs	r1, #0
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f002 fc4e 	bl	8006d4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	32b0      	adds	r2, #176	; 0xb0
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	32b0      	adds	r2, #176	; 0xb0
 80044ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7c1b      	ldrb	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d138      	bne.n	800454e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80044dc:	4b5e      	ldr	r3, [pc, #376]	; (8004658 <USBD_CDC_Init+0x1e4>)
 80044de:	7819      	ldrb	r1, [r3, #0]
 80044e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044e4:	2202      	movs	r2, #2
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f002 fac9 	bl	8006a7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80044ec:	4b5a      	ldr	r3, [pc, #360]	; (8004658 <USBD_CDC_Init+0x1e4>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3324      	adds	r3, #36	; 0x24
 8004502:	2201      	movs	r2, #1
 8004504:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004506:	4b55      	ldr	r3, [pc, #340]	; (800465c <USBD_CDC_Init+0x1e8>)
 8004508:	7819      	ldrb	r1, [r3, #0]
 800450a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800450e:	2202      	movs	r2, #2
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f002 fab4 	bl	8006a7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004516:	4b51      	ldr	r3, [pc, #324]	; (800465c <USBD_CDC_Init+0x1e8>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	f003 020f 	and.w	r2, r3, #15
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800452e:	2201      	movs	r2, #1
 8004530:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004532:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <USBD_CDC_Init+0x1ec>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	f003 020f 	and.w	r2, r3, #15
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	3326      	adds	r3, #38	; 0x26
 8004548:	2210      	movs	r2, #16
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e035      	b.n	80045ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800454e:	4b42      	ldr	r3, [pc, #264]	; (8004658 <USBD_CDC_Init+0x1e4>)
 8004550:	7819      	ldrb	r1, [r3, #0]
 8004552:	2340      	movs	r3, #64	; 0x40
 8004554:	2202      	movs	r2, #2
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f002 fa91 	bl	8006a7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800455c:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <USBD_CDC_Init+0x1e4>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	f003 020f 	and.w	r2, r3, #15
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3324      	adds	r3, #36	; 0x24
 8004572:	2201      	movs	r2, #1
 8004574:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004576:	4b39      	ldr	r3, [pc, #228]	; (800465c <USBD_CDC_Init+0x1e8>)
 8004578:	7819      	ldrb	r1, [r3, #0]
 800457a:	2340      	movs	r3, #64	; 0x40
 800457c:	2202      	movs	r2, #2
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f002 fa7d 	bl	8006a7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004584:	4b35      	ldr	r3, [pc, #212]	; (800465c <USBD_CDC_Init+0x1e8>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800459c:	2201      	movs	r2, #1
 800459e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80045a0:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <USBD_CDC_Init+0x1ec>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	3326      	adds	r3, #38	; 0x26
 80045b6:	2210      	movs	r2, #16
 80045b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045ba:	4b29      	ldr	r3, [pc, #164]	; (8004660 <USBD_CDC_Init+0x1ec>)
 80045bc:	7819      	ldrb	r1, [r3, #0]
 80045be:	2308      	movs	r3, #8
 80045c0:	2203      	movs	r2, #3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f002 fa5b 	bl	8006a7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <USBD_CDC_Init+0x1ec>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3324      	adds	r3, #36	; 0x24
 80045de:	2201      	movs	r2, #1
 80045e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	33b0      	adds	r3, #176	; 0xb0
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004618:	2302      	movs	r3, #2
 800461a:	e018      	b.n	800464e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	7c1b      	ldrb	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004624:	4b0d      	ldr	r3, [pc, #52]	; (800465c <USBD_CDC_Init+0x1e8>)
 8004626:	7819      	ldrb	r1, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800462e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f002 fb12 	bl	8006c5c <USBD_LL_PrepareReceive>
 8004638:	e008      	b.n	800464c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <USBD_CDC_Init+0x1e8>)
 800463c:	7819      	ldrb	r1, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004644:	2340      	movs	r3, #64	; 0x40
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f002 fb08 	bl	8006c5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000093 	.word	0x20000093
 800465c:	20000094 	.word	0x20000094
 8004660:	20000095 	.word	0x20000095

08004664 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004670:	4b3a      	ldr	r3, [pc, #232]	; (800475c <USBD_CDC_DeInit+0xf8>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f002 fa27 	bl	8006aca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800467c:	4b37      	ldr	r3, [pc, #220]	; (800475c <USBD_CDC_DeInit+0xf8>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3324      	adds	r3, #36	; 0x24
 8004692:	2200      	movs	r2, #0
 8004694:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004696:	4b32      	ldr	r3, [pc, #200]	; (8004760 <USBD_CDC_DeInit+0xfc>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f002 fa14 	bl	8006aca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80046a2:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <USBD_CDC_DeInit+0xfc>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f003 020f 	and.w	r2, r3, #15
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046ba:	2200      	movs	r2, #0
 80046bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <USBD_CDC_DeInit+0x100>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f002 fa00 	bl	8006aca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80046ca:	4b26      	ldr	r3, [pc, #152]	; (8004764 <USBD_CDC_DeInit+0x100>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f003 020f 	and.w	r2, r3, #15
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	3324      	adds	r3, #36	; 0x24
 80046e0:	2200      	movs	r2, #0
 80046e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80046e4:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <USBD_CDC_DeInit+0x100>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	f003 020f 	and.w	r2, r3, #15
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	3326      	adds	r3, #38	; 0x26
 80046fa:	2200      	movs	r2, #0
 80046fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	32b0      	adds	r2, #176	; 0xb0
 8004708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01f      	beq.n	8004750 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	33b0      	adds	r3, #176	; 0xb0
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	32b0      	adds	r2, #176	; 0xb0
 800472e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004732:	4618      	mov	r0, r3
 8004734:	f002 fad4 	bl	8006ce0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	32b0      	adds	r2, #176	; 0xb0
 8004742:	2100      	movs	r1, #0
 8004744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000093 	.word	0x20000093
 8004760:	20000094 	.word	0x20000094
 8004764:	20000095 	.word	0x20000095

08004768 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	32b0      	adds	r2, #176	; 0xb0
 800477c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004780:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004794:	2303      	movs	r3, #3
 8004796:	e0bf      	b.n	8004918 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d050      	beq.n	8004846 <USBD_CDC_Setup+0xde>
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	f040 80af 	bne.w	8004908 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	88db      	ldrh	r3, [r3, #6]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d03a      	beq.n	8004828 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	b25b      	sxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da1b      	bge.n	80047f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	33b0      	adds	r3, #176	; 0xb0
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80047d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	88d2      	ldrh	r2, [r2, #6]
 80047d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	88db      	ldrh	r3, [r3, #6]
 80047de:	2b07      	cmp	r3, #7
 80047e0:	bf28      	it	cs
 80047e2:	2307      	movcs	r3, #7
 80047e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	89fa      	ldrh	r2, [r7, #14]
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 fd43 	bl	8006278 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80047f2:	e090      	b.n	8004916 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	785a      	ldrb	r2, [r3, #1]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	88db      	ldrh	r3, [r3, #6]
 8004802:	2b3f      	cmp	r3, #63	; 0x3f
 8004804:	d803      	bhi.n	800480e <USBD_CDC_Setup+0xa6>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	88db      	ldrh	r3, [r3, #6]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	e000      	b.n	8004810 <USBD_CDC_Setup+0xa8>
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004816:	6939      	ldr	r1, [r7, #16]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800481e:	461a      	mov	r2, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f001 fd55 	bl	80062d0 <USBD_CtlPrepareRx>
      break;
 8004826:	e076      	b.n	8004916 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	33b0      	adds	r3, #176	; 0xb0
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	7850      	ldrb	r0, [r2, #1]
 800483e:	2200      	movs	r2, #0
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	4798      	blx	r3
      break;
 8004844:	e067      	b.n	8004916 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	2b0b      	cmp	r3, #11
 800484c:	d851      	bhi.n	80048f2 <USBD_CDC_Setup+0x18a>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <USBD_CDC_Setup+0xec>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004885 	.word	0x08004885
 8004858:	08004901 	.word	0x08004901
 800485c:	080048f3 	.word	0x080048f3
 8004860:	080048f3 	.word	0x080048f3
 8004864:	080048f3 	.word	0x080048f3
 8004868:	080048f3 	.word	0x080048f3
 800486c:	080048f3 	.word	0x080048f3
 8004870:	080048f3 	.word	0x080048f3
 8004874:	080048f3 	.word	0x080048f3
 8004878:	080048f3 	.word	0x080048f3
 800487c:	080048af 	.word	0x080048af
 8004880:	080048d9 	.word	0x080048d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b03      	cmp	r3, #3
 800488e:	d107      	bne.n	80048a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004890:	f107 030a 	add.w	r3, r7, #10
 8004894:	2202      	movs	r2, #2
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 fced 	bl	8006278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800489e:	e032      	b.n	8004906 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f001 fc77 	bl	8006196 <USBD_CtlError>
            ret = USBD_FAIL;
 80048a8:	2303      	movs	r3, #3
 80048aa:	75fb      	strb	r3, [r7, #23]
          break;
 80048ac:	e02b      	b.n	8004906 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d107      	bne.n	80048ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80048ba:	f107 030d 	add.w	r3, r7, #13
 80048be:	2201      	movs	r2, #1
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f001 fcd8 	bl	8006278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048c8:	e01d      	b.n	8004906 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80048ca:	6839      	ldr	r1, [r7, #0]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 fc62 	bl	8006196 <USBD_CtlError>
            ret = USBD_FAIL;
 80048d2:	2303      	movs	r3, #3
 80048d4:	75fb      	strb	r3, [r7, #23]
          break;
 80048d6:	e016      	b.n	8004906 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d00f      	beq.n	8004904 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f001 fc55 	bl	8006196 <USBD_CtlError>
            ret = USBD_FAIL;
 80048ec:	2303      	movs	r3, #3
 80048ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80048f0:	e008      	b.n	8004904 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 fc4e 	bl	8006196 <USBD_CtlError>
          ret = USBD_FAIL;
 80048fa:	2303      	movs	r3, #3
 80048fc:	75fb      	strb	r3, [r7, #23]
          break;
 80048fe:	e002      	b.n	8004906 <USBD_CDC_Setup+0x19e>
          break;
 8004900:	bf00      	nop
 8004902:	e008      	b.n	8004916 <USBD_CDC_Setup+0x1ae>
          break;
 8004904:	bf00      	nop
      }
      break;
 8004906:	e006      	b.n	8004916 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 fc43 	bl	8006196 <USBD_CtlError>
      ret = USBD_FAIL;
 8004910:	2303      	movs	r3, #3
 8004912:	75fb      	strb	r3, [r7, #23]
      break;
 8004914:	bf00      	nop
  }

  return (uint8_t)ret;
 8004916:	7dfb      	ldrb	r3, [r7, #23]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004932:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	32b0      	adds	r2, #176	; 0xb0
 800493e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004946:	2303      	movs	r3, #3
 8004948:	e065      	b.n	8004a16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	32b0      	adds	r2, #176	; 0xb0
 8004954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004958:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	f003 020f 	and.w	r2, r3, #15
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	3318      	adds	r3, #24
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02f      	beq.n	80049d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	f003 020f 	and.w	r2, r3, #15
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	3318      	adds	r3, #24
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	f003 010f 	and.w	r1, r3, #15
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	460b      	mov	r3, r1
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	440b      	add	r3, r1
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4403      	add	r3, r0
 800499c:	3348      	adds	r3, #72	; 0x48
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d112      	bne.n	80049d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	f003 020f 	and.w	r2, r3, #15
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	3318      	adds	r3, #24
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80049c6:	78f9      	ldrb	r1, [r7, #3]
 80049c8:	2300      	movs	r3, #0
 80049ca:	2200      	movs	r2, #0
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f002 f924 	bl	8006c1a <USBD_LL_Transmit>
 80049d2:	e01f      	b.n	8004a14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	33b0      	adds	r3, #176	; 0xb0
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	33b0      	adds	r3, #176	; 0xb0
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	32b0      	adds	r2, #176	; 0xb0
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	32b0      	adds	r2, #176	; 0xb0
 8004a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e01a      	b.n	8004a86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f002 f922 	bl	8006c9e <USBD_LL_GetRxDataSize>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	33b0      	adds	r3, #176	; 0xb0
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004a80:	4611      	mov	r1, r2
 8004a82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	32b0      	adds	r2, #176	; 0xb0
 8004aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e025      	b.n	8004afc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	33b0      	adds	r3, #176	; 0xb0
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01a      	beq.n	8004afa <USBD_CDC_EP0_RxReady+0x6c>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004aca:	2bff      	cmp	r3, #255	; 0xff
 8004acc:	d015      	beq.n	8004afa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	33b0      	adds	r3, #176	; 0xb0
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004ae6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004aee:	b292      	uxth	r2, r2
 8004af0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	22ff      	movs	r2, #255	; 0xff
 8004af6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b0c:	2182      	movs	r1, #130	; 0x82
 8004b0e:	4818      	ldr	r0, [pc, #96]	; (8004b70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b10:	f000 fd09 	bl	8005526 <USBD_GetEpDesc>
 8004b14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b16:	2101      	movs	r1, #1
 8004b18:	4815      	ldr	r0, [pc, #84]	; (8004b70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b1a:	f000 fd04 	bl	8005526 <USBD_GetEpDesc>
 8004b1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b20:	2181      	movs	r1, #129	; 0x81
 8004b22:	4813      	ldr	r0, [pc, #76]	; (8004b70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b24:	f000 fcff 	bl	8005526 <USBD_GetEpDesc>
 8004b28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2210      	movs	r2, #16
 8004b34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b44:	711a      	strb	r2, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b58:	711a      	strb	r2, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2243      	movs	r2, #67	; 0x43
 8004b62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b64:	4b02      	ldr	r3, [pc, #8]	; (8004b70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000050 	.word	0x20000050

08004b74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b7c:	2182      	movs	r1, #130	; 0x82
 8004b7e:	4818      	ldr	r0, [pc, #96]	; (8004be0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b80:	f000 fcd1 	bl	8005526 <USBD_GetEpDesc>
 8004b84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b86:	2101      	movs	r1, #1
 8004b88:	4815      	ldr	r0, [pc, #84]	; (8004be0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b8a:	f000 fccc 	bl	8005526 <USBD_GetEpDesc>
 8004b8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b90:	2181      	movs	r1, #129	; 0x81
 8004b92:	4813      	ldr	r0, [pc, #76]	; (8004be0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b94:	f000 fcc7 	bl	8005526 <USBD_GetEpDesc>
 8004b98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	711a      	strb	r2, [r3, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f042 0202 	orr.w	r2, r2, #2
 8004bb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	711a      	strb	r2, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f042 0202 	orr.w	r2, r2, #2
 8004bcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2243      	movs	r2, #67	; 0x43
 8004bd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000050 	.word	0x20000050

08004be4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bec:	2182      	movs	r1, #130	; 0x82
 8004bee:	4818      	ldr	r0, [pc, #96]	; (8004c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bf0:	f000 fc99 	bl	8005526 <USBD_GetEpDesc>
 8004bf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	4815      	ldr	r0, [pc, #84]	; (8004c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bfa:	f000 fc94 	bl	8005526 <USBD_GetEpDesc>
 8004bfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c00:	2181      	movs	r1, #129	; 0x81
 8004c02:	4813      	ldr	r0, [pc, #76]	; (8004c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c04:	f000 fc8f 	bl	8005526 <USBD_GetEpDesc>
 8004c08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2210      	movs	r2, #16
 8004c14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c24:	711a      	strb	r2, [r3, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d006      	beq.n	8004c3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c38:	711a      	strb	r2, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2243      	movs	r2, #67	; 0x43
 8004c42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c44:	4b02      	ldr	r3, [pc, #8]	; (8004c50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000050 	.word	0x20000050

08004c54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	220a      	movs	r2, #10
 8004c60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004c62:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	2000000c 	.word	0x2000000c

08004c74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e009      	b.n	8004c9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	33b0      	adds	r3, #176	; 0xb0
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	32b0      	adds	r2, #176	; 0xb0
 8004cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e008      	b.n	8004ce0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	32b0      	adds	r2, #176	; 0xb0
 8004d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e004      	b.n	8004d1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	32b0      	adds	r2, #176	; 0xb0
 8004d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	32b0      	adds	r2, #176	; 0xb0
 8004d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e018      	b.n	8004d88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7c1b      	ldrb	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <USBD_CDC_ReceivePacket+0x68>)
 8004d60:	7819      	ldrb	r1, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 ff75 	bl	8006c5c <USBD_LL_PrepareReceive>
 8004d72:	e008      	b.n	8004d86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <USBD_CDC_ReceivePacket+0x68>)
 8004d76:	7819      	ldrb	r1, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d7e:	2340      	movs	r3, #64	; 0x40
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f001 ff6b 	bl	8006c5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000094 	.word	0x20000094

08004d94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e01f      	b.n	8004dec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	79fa      	ldrb	r2, [r7, #7]
 8004dde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f001 fde5 	bl	80069b0 <USBD_LL_Init>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e025      	b.n	8004e58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	32ae      	adds	r2, #174	; 0xae
 8004e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00f      	beq.n	8004e48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	32ae      	adds	r2, #174	; 0xae
 8004e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f107 020e 	add.w	r2, r7, #14
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4798      	blx	r3
 8004e40:	4602      	mov	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f001 fded 	bl	8006a48 <USBD_LL_Start>
 8004e6e:	4603      	mov	r3, r0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004eec:	2303      	movs	r3, #3
 8004eee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 f908 	bl	8006122 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004f20:	461a      	mov	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d01a      	beq.n	8004f6c <USBD_LL_SetupStage+0x72>
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d822      	bhi.n	8004f80 <USBD_LL_SetupStage+0x86>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <USBD_LL_SetupStage+0x4a>
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d00a      	beq.n	8004f58 <USBD_LL_SetupStage+0x5e>
 8004f42:	e01d      	b.n	8004f80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fb5f 	bl	8005610 <USBD_StdDevReq>
 8004f52:	4603      	mov	r3, r0
 8004f54:	73fb      	strb	r3, [r7, #15]
      break;
 8004f56:	e020      	b.n	8004f9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fbc7 	bl	80056f4 <USBD_StdItfReq>
 8004f66:	4603      	mov	r3, r0
 8004f68:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6a:	e016      	b.n	8004f9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fc29 	bl	80057cc <USBD_StdEPReq>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7e:	e00c      	b.n	8004f9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 fdba 	bl	8006b08 <USBD_LL_StallEP>
 8004f94:	4603      	mov	r3, r0
 8004f96:	73fb      	strb	r3, [r7, #15]
      break;
 8004f98:	bf00      	nop
  }

  return ret;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	460b      	mov	r3, r1
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004fb6:	7afb      	ldrb	r3, [r7, #11]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d16e      	bne.n	800509a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004fc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	f040 8098 	bne.w	8005100 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d913      	bls.n	8005004 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	1ad2      	subs	r2, r2, r3
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bf28      	it	cs
 8004ff6:	4613      	movcs	r3, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f001 f984 	bl	800630a <USBD_CtlContinueRx>
 8005002:	e07d      	b.n	8005100 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2b02      	cmp	r3, #2
 8005010:	d014      	beq.n	800503c <USBD_LL_DataOutStage+0x98>
 8005012:	2b02      	cmp	r3, #2
 8005014:	d81d      	bhi.n	8005052 <USBD_LL_DataOutStage+0xae>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <USBD_LL_DataOutStage+0x7c>
 800501a:	2b01      	cmp	r3, #1
 800501c:	d003      	beq.n	8005026 <USBD_LL_DataOutStage+0x82>
 800501e:	e018      	b.n	8005052 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	75bb      	strb	r3, [r7, #22]
            break;
 8005024:	e018      	b.n	8005058 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800502c:	b2db      	uxtb	r3, r3
 800502e:	4619      	mov	r1, r3
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fa5e 	bl	80054f2 <USBD_CoreFindIF>
 8005036:	4603      	mov	r3, r0
 8005038:	75bb      	strb	r3, [r7, #22]
            break;
 800503a:	e00d      	b.n	8005058 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005042:	b2db      	uxtb	r3, r3
 8005044:	4619      	mov	r1, r3
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fa60 	bl	800550c <USBD_CoreFindEP>
 800504c:	4603      	mov	r3, r0
 800504e:	75bb      	strb	r3, [r7, #22]
            break;
 8005050:	e002      	b.n	8005058 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	75bb      	strb	r3, [r7, #22]
            break;
 8005056:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005058:	7dbb      	ldrb	r3, [r7, #22]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d119      	bne.n	8005092 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b03      	cmp	r3, #3
 8005068:	d113      	bne.n	8005092 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800506a:	7dba      	ldrb	r2, [r7, #22]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	32ae      	adds	r2, #174	; 0xae
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800507a:	7dba      	ldrb	r2, [r7, #22]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005082:	7dba      	ldrb	r2, [r7, #22]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	32ae      	adds	r2, #174	; 0xae
 8005088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f001 f94a 	bl	800632c <USBD_CtlSendStatus>
 8005098:	e032      	b.n	8005100 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	4619      	mov	r1, r3
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fa31 	bl	800550c <USBD_CoreFindEP>
 80050aa:	4603      	mov	r3, r0
 80050ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050ae:	7dbb      	ldrb	r3, [r7, #22]
 80050b0:	2bff      	cmp	r3, #255	; 0xff
 80050b2:	d025      	beq.n	8005100 <USBD_LL_DataOutStage+0x15c>
 80050b4:	7dbb      	ldrb	r3, [r7, #22]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d122      	bne.n	8005100 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d117      	bne.n	80050f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80050c6:	7dba      	ldrb	r2, [r7, #22]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	32ae      	adds	r2, #174	; 0xae
 80050cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00f      	beq.n	80050f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80050d6:	7dba      	ldrb	r2, [r7, #22]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80050de:	7dba      	ldrb	r2, [r7, #22]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	32ae      	adds	r2, #174	; 0xae
 80050e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	7afa      	ldrb	r2, [r7, #11]
 80050ec:	4611      	mov	r1, r2
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	4798      	blx	r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	e000      	b.n	8005102 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b086      	sub	sp, #24
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	460b      	mov	r3, r1
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d16f      	bne.n	80051fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3314      	adds	r3, #20
 8005122:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800512a:	2b02      	cmp	r3, #2
 800512c:	d15a      	bne.n	80051e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	429a      	cmp	r2, r3
 8005138:	d914      	bls.n	8005164 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	1ad2      	subs	r2, r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	461a      	mov	r2, r3
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f001 f8ac 	bl	80062ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005156:	2300      	movs	r3, #0
 8005158:	2200      	movs	r2, #0
 800515a:	2100      	movs	r1, #0
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f001 fd7d 	bl	8006c5c <USBD_LL_PrepareReceive>
 8005162:	e03f      	b.n	80051e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	429a      	cmp	r2, r3
 800516e:	d11c      	bne.n	80051aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005178:	429a      	cmp	r2, r3
 800517a:	d316      	bcc.n	80051aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005186:	429a      	cmp	r2, r3
 8005188:	d20f      	bcs.n	80051aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800518a:	2200      	movs	r2, #0
 800518c:	2100      	movs	r1, #0
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f001 f88d 	bl	80062ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800519c:	2300      	movs	r3, #0
 800519e:	2200      	movs	r2, #0
 80051a0:	2100      	movs	r1, #0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f001 fd5a 	bl	8006c5c <USBD_LL_PrepareReceive>
 80051a8:	e01c      	b.n	80051e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d10f      	bne.n	80051d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051d6:	2180      	movs	r1, #128	; 0x80
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f001 fc95 	bl	8006b08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f001 f8b7 	bl	8006352 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d03a      	beq.n	8005264 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff fe42 	bl	8004e78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051fc:	e032      	b.n	8005264 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80051fe:	7afb      	ldrb	r3, [r7, #11]
 8005200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005204:	b2db      	uxtb	r3, r3
 8005206:	4619      	mov	r1, r3
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f97f 	bl	800550c <USBD_CoreFindEP>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2bff      	cmp	r3, #255	; 0xff
 8005216:	d025      	beq.n	8005264 <USBD_LL_DataInStage+0x15a>
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d122      	bne.n	8005264 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b03      	cmp	r3, #3
 8005228:	d11c      	bne.n	8005264 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800522a:	7dfa      	ldrb	r2, [r7, #23]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	32ae      	adds	r2, #174	; 0xae
 8005230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d014      	beq.n	8005264 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800523a:	7dfa      	ldrb	r2, [r7, #23]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005242:	7dfa      	ldrb	r2, [r7, #23]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	32ae      	adds	r2, #174	; 0xae
 8005248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	7afa      	ldrb	r2, [r7, #11]
 8005250:	4611      	mov	r1, r2
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	4798      	blx	r3
 8005256:	4603      	mov	r3, r0
 8005258:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800525a:	7dbb      	ldrb	r3, [r7, #22]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005260:	7dbb      	ldrb	r3, [r7, #22]
 8005262:	e000      	b.n	8005266 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00e      	beq.n	80052d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6852      	ldr	r2, [r2, #4]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	4611      	mov	r1, r2
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80052d0:	2303      	movs	r3, #3
 80052d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052d4:	2340      	movs	r3, #64	; 0x40
 80052d6:	2200      	movs	r2, #0
 80052d8:	2100      	movs	r1, #0
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fbcf 	bl	8006a7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2240      	movs	r2, #64	; 0x40
 80052ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052f0:	2340      	movs	r3, #64	; 0x40
 80052f2:	2200      	movs	r2, #0
 80052f4:	2180      	movs	r1, #128	; 0x80
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 fbc1 	bl	8006a7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2240      	movs	r2, #64	; 0x40
 8005306:	621a      	str	r2, [r3, #32]

  return ret;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005340:	b2da      	uxtb	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2204      	movs	r2, #4
 800534c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b04      	cmp	r3, #4
 8005370:	d106      	bne.n	8005380 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005378:	b2da      	uxtb	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d110      	bne.n	80053c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	32ae      	adds	r2, #174	; 0xae
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e01c      	b.n	800542a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d115      	bne.n	8005428 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	32ae      	adds	r2, #174	; 0xae
 8005406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	32ae      	adds	r2, #174	; 0xae
 800541a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	4611      	mov	r1, r2
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	32ae      	adds	r2, #174	; 0xae
 8005448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005450:	2303      	movs	r3, #3
 8005452:	e01c      	b.n	800548e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b03      	cmp	r3, #3
 800545e:	d115      	bne.n	800548c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	32ae      	adds	r2, #174	; 0xae
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00b      	beq.n	800548c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	32ae      	adds	r2, #174	; 0xae
 800547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	78fa      	ldrb	r2, [r7, #3]
 8005486:	4611      	mov	r1, r2
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00e      	beq.n	80054e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6852      	ldr	r2, [r2, #4]
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	4611      	mov	r1, r2
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80054e4:	2303      	movs	r3, #3
 80054e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	460b      	mov	r3, r1
 80054fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005518:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	885b      	ldrh	r3, [r3, #2]
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	429a      	cmp	r2, r3
 800554c:	d920      	bls.n	8005590 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005556:	e013      	b.n	8005580 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005558:	f107 030a 	add.w	r3, r7, #10
 800555c:	4619      	mov	r1, r3
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f000 f81b 	bl	800559a <USBD_GetNextDesc>
 8005564:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	2b05      	cmp	r3, #5
 800556c:	d108      	bne.n	8005580 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	789b      	ldrb	r3, [r3, #2]
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	429a      	cmp	r2, r3
 800557a:	d008      	beq.n	800558e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	885b      	ldrh	r3, [r3, #2]
 8005584:	b29a      	uxth	r2, r3
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	429a      	cmp	r2, r3
 800558a:	d8e5      	bhi.n	8005558 <USBD_GetEpDesc+0x32>
 800558c:	e000      	b.n	8005590 <USBD_GetEpDesc+0x6a>
          break;
 800558e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005590:	693b      	ldr	r3, [r7, #16]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80055c6:	68fb      	ldr	r3, [r7, #12]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	3301      	adds	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055f2:	8a3b      	ldrh	r3, [r7, #16]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	b21a      	sxth	r2, r3
 80055f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	b21b      	sxth	r3, r3
 8005600:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005602:	89fb      	ldrh	r3, [r7, #14]
}
 8005604:	4618      	mov	r0, r3
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d005      	beq.n	8005636 <USBD_StdDevReq+0x26>
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d857      	bhi.n	80056de <USBD_StdDevReq+0xce>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00f      	beq.n	8005652 <USBD_StdDevReq+0x42>
 8005632:	2b20      	cmp	r3, #32
 8005634:	d153      	bne.n	80056de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	32ae      	adds	r2, #174	; 0xae
 8005640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]
      break;
 8005650:	e04a      	b.n	80056e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b09      	cmp	r3, #9
 8005658:	d83b      	bhi.n	80056d2 <USBD_StdDevReq+0xc2>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <USBD_StdDevReq+0x50>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	080056b5 	.word	0x080056b5
 8005664:	080056c9 	.word	0x080056c9
 8005668:	080056d3 	.word	0x080056d3
 800566c:	080056bf 	.word	0x080056bf
 8005670:	080056d3 	.word	0x080056d3
 8005674:	08005693 	.word	0x08005693
 8005678:	08005689 	.word	0x08005689
 800567c:	080056d3 	.word	0x080056d3
 8005680:	080056ab 	.word	0x080056ab
 8005684:	0800569d 	.word	0x0800569d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa3c 	bl	8005b08 <USBD_GetDescriptor>
          break;
 8005690:	e024      	b.n	80056dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fba1 	bl	8005ddc <USBD_SetAddress>
          break;
 800569a:	e01f      	b.n	80056dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fbe0 	bl	8005e64 <USBD_SetConfig>
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]
          break;
 80056a8:	e018      	b.n	80056dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fc83 	bl	8005fb8 <USBD_GetConfig>
          break;
 80056b2:	e013      	b.n	80056dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fcb4 	bl	8006024 <USBD_GetStatus>
          break;
 80056bc:	e00e      	b.n	80056dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fce3 	bl	800608c <USBD_SetFeature>
          break;
 80056c6:	e009      	b.n	80056dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fd07 	bl	80060de <USBD_ClrFeature>
          break;
 80056d0:	e004      	b.n	80056dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fd5e 	bl	8006196 <USBD_CtlError>
          break;
 80056da:	bf00      	nop
      }
      break;
 80056dc:	e004      	b.n	80056e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fd58 	bl	8006196 <USBD_CtlError>
      break;
 80056e6:	bf00      	nop
  }

  return ret;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop

080056f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d005      	beq.n	800571a <USBD_StdItfReq+0x26>
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d852      	bhi.n	80057b8 <USBD_StdItfReq+0xc4>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <USBD_StdItfReq+0x26>
 8005716:	2b20      	cmp	r3, #32
 8005718:	d14e      	bne.n	80057b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	2b02      	cmp	r3, #2
 8005726:	d840      	bhi.n	80057aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	889b      	ldrh	r3, [r3, #4]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b01      	cmp	r3, #1
 8005730:	d836      	bhi.n	80057a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	889b      	ldrh	r3, [r3, #4]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fed9 	bl	80054f2 <USBD_CoreFindIF>
 8005740:	4603      	mov	r3, r0
 8005742:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	2bff      	cmp	r3, #255	; 0xff
 8005748:	d01d      	beq.n	8005786 <USBD_StdItfReq+0x92>
 800574a:	7bbb      	ldrb	r3, [r7, #14]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11a      	bne.n	8005786 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005750:	7bba      	ldrb	r2, [r7, #14]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	32ae      	adds	r2, #174	; 0xae
 8005756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00f      	beq.n	8005780 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005760:	7bba      	ldrb	r2, [r7, #14]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005768:	7bba      	ldrb	r2, [r7, #14]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	32ae      	adds	r2, #174	; 0xae
 800576e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800577e:	e004      	b.n	800578a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005780:	2303      	movs	r3, #3
 8005782:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005784:	e001      	b.n	800578a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005786:	2303      	movs	r3, #3
 8005788:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	88db      	ldrh	r3, [r3, #6]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d110      	bne.n	80057b4 <USBD_StdItfReq+0xc0>
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10d      	bne.n	80057b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fdc7 	bl	800632c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800579e:	e009      	b.n	80057b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fcf7 	bl	8006196 <USBD_CtlError>
          break;
 80057a8:	e004      	b.n	80057b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fcf2 	bl	8006196 <USBD_CtlError>
          break;
 80057b2:	e000      	b.n	80057b6 <USBD_StdItfReq+0xc2>
          break;
 80057b4:	bf00      	nop
      }
      break;
 80057b6:	e004      	b.n	80057c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fceb 	bl	8006196 <USBD_CtlError>
      break;
 80057c0:	bf00      	nop
  }

  return ret;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	889b      	ldrh	r3, [r3, #4]
 80057de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d007      	beq.n	80057fc <USBD_StdEPReq+0x30>
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	f200 817f 	bhi.w	8005af0 <USBD_StdEPReq+0x324>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d02a      	beq.n	800584c <USBD_StdEPReq+0x80>
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	f040 817a 	bne.w	8005af0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fe83 	bl	800550c <USBD_CoreFindEP>
 8005806:	4603      	mov	r3, r0
 8005808:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800580a:	7b7b      	ldrb	r3, [r7, #13]
 800580c:	2bff      	cmp	r3, #255	; 0xff
 800580e:	f000 8174 	beq.w	8005afa <USBD_StdEPReq+0x32e>
 8005812:	7b7b      	ldrb	r3, [r7, #13]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f040 8170 	bne.w	8005afa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800581a:	7b7a      	ldrb	r2, [r7, #13]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005822:	7b7a      	ldrb	r2, [r7, #13]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	32ae      	adds	r2, #174	; 0xae
 8005828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8163 	beq.w	8005afa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005834:	7b7a      	ldrb	r2, [r7, #13]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	32ae      	adds	r2, #174	; 0xae
 800583a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800584a:	e156      	b.n	8005afa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2b03      	cmp	r3, #3
 8005852:	d008      	beq.n	8005866 <USBD_StdEPReq+0x9a>
 8005854:	2b03      	cmp	r3, #3
 8005856:	f300 8145 	bgt.w	8005ae4 <USBD_StdEPReq+0x318>
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 809b 	beq.w	8005996 <USBD_StdEPReq+0x1ca>
 8005860:	2b01      	cmp	r3, #1
 8005862:	d03c      	beq.n	80058de <USBD_StdEPReq+0x112>
 8005864:	e13e      	b.n	8005ae4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d002      	beq.n	8005878 <USBD_StdEPReq+0xac>
 8005872:	2b03      	cmp	r3, #3
 8005874:	d016      	beq.n	80058a4 <USBD_StdEPReq+0xd8>
 8005876:	e02c      	b.n	80058d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005878:	7bbb      	ldrb	r3, [r7, #14]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00d      	beq.n	800589a <USBD_StdEPReq+0xce>
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	d00a      	beq.n	800589a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005884:	7bbb      	ldrb	r3, [r7, #14]
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 f93d 	bl	8006b08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800588e:	2180      	movs	r1, #128	; 0x80
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f001 f939 	bl	8006b08 <USBD_LL_StallEP>
 8005896:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005898:	e020      	b.n	80058dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fc7a 	bl	8006196 <USBD_CtlError>
              break;
 80058a2:	e01b      	b.n	80058dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	885b      	ldrh	r3, [r3, #2]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10e      	bne.n	80058ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <USBD_StdEPReq+0xfe>
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d008      	beq.n	80058ca <USBD_StdEPReq+0xfe>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	88db      	ldrh	r3, [r3, #6]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 f91f 	bl	8006b08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fd2e 	bl	800632c <USBD_CtlSendStatus>

              break;
 80058d0:	e004      	b.n	80058dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fc5e 	bl	8006196 <USBD_CtlError>
              break;
 80058da:	bf00      	nop
          }
          break;
 80058dc:	e107      	b.n	8005aee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d002      	beq.n	80058f0 <USBD_StdEPReq+0x124>
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d016      	beq.n	800591c <USBD_StdEPReq+0x150>
 80058ee:	e04b      	b.n	8005988 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058f0:	7bbb      	ldrb	r3, [r7, #14]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <USBD_StdEPReq+0x146>
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	2b80      	cmp	r3, #128	; 0x80
 80058fa:	d00a      	beq.n	8005912 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 f901 	bl	8006b08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005906:	2180      	movs	r1, #128	; 0x80
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 f8fd 	bl	8006b08 <USBD_LL_StallEP>
 800590e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005910:	e040      	b.n	8005994 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fc3e 	bl	8006196 <USBD_CtlError>
              break;
 800591a:	e03b      	b.n	8005994 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	885b      	ldrh	r3, [r3, #2]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d136      	bne.n	8005992 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 f907 	bl	8006b46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fcf7 	bl	800632c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fde2 	bl	800550c <USBD_CoreFindEP>
 8005948:	4603      	mov	r3, r0
 800594a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800594c:	7b7b      	ldrb	r3, [r7, #13]
 800594e:	2bff      	cmp	r3, #255	; 0xff
 8005950:	d01f      	beq.n	8005992 <USBD_StdEPReq+0x1c6>
 8005952:	7b7b      	ldrb	r3, [r7, #13]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d11c      	bne.n	8005992 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005958:	7b7a      	ldrb	r2, [r7, #13]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005960:	7b7a      	ldrb	r2, [r7, #13]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	32ae      	adds	r2, #174	; 0xae
 8005966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d010      	beq.n	8005992 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005970:	7b7a      	ldrb	r2, [r7, #13]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	32ae      	adds	r2, #174	; 0xae
 8005976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	4798      	blx	r3
 8005982:	4603      	mov	r3, r0
 8005984:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005986:	e004      	b.n	8005992 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fc03 	bl	8006196 <USBD_CtlError>
              break;
 8005990:	e000      	b.n	8005994 <USBD_StdEPReq+0x1c8>
              break;
 8005992:	bf00      	nop
          }
          break;
 8005994:	e0ab      	b.n	8005aee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d002      	beq.n	80059a8 <USBD_StdEPReq+0x1dc>
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d032      	beq.n	8005a0c <USBD_StdEPReq+0x240>
 80059a6:	e097      	b.n	8005ad8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <USBD_StdEPReq+0x1f2>
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d004      	beq.n	80059be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fbed 	bl	8006196 <USBD_CtlError>
                break;
 80059bc:	e091      	b.n	8005ae2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	da0b      	bge.n	80059de <USBD_StdEPReq+0x212>
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	3310      	adds	r3, #16
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	3304      	adds	r3, #4
 80059dc:	e00b      	b.n	80059f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	3304      	adds	r3, #4
 80059f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2202      	movs	r2, #2
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fc37 	bl	8006278 <USBD_CtlSendData>
              break;
 8005a0a:	e06a      	b.n	8005ae2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da11      	bge.n	8005a38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a14:	7bbb      	ldrb	r3, [r7, #14]
 8005a16:	f003 020f 	and.w	r2, r3, #15
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d117      	bne.n	8005a5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fbb0 	bl	8006196 <USBD_CtlError>
                  break;
 8005a36:	e054      	b.n	8005ae2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb9d 	bl	8006196 <USBD_CtlError>
                  break;
 8005a5c:	e041      	b.n	8005ae2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	da0b      	bge.n	8005a7e <USBD_StdEPReq+0x2b2>
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	3310      	adds	r3, #16
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	e00b      	b.n	8005a96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	3304      	adds	r3, #4
 8005a96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <USBD_StdEPReq+0x2d8>
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	2b80      	cmp	r3, #128	; 0x80
 8005aa2:	d103      	bne.n	8005aac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e00e      	b.n	8005aca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 f867 	bl	8006b84 <USBD_LL_IsStallEP>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e002      	b.n	8005aca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2202      	movs	r2, #2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fbd1 	bl	8006278 <USBD_CtlSendData>
              break;
 8005ad6:	e004      	b.n	8005ae2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb5b 	bl	8006196 <USBD_CtlError>
              break;
 8005ae0:	bf00      	nop
          }
          break;
 8005ae2:	e004      	b.n	8005aee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb55 	bl	8006196 <USBD_CtlError>
          break;
 8005aec:	bf00      	nop
      }
      break;
 8005aee:	e005      	b.n	8005afc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fb4f 	bl	8006196 <USBD_CtlError>
      break;
 8005af8:	e000      	b.n	8005afc <USBD_StdEPReq+0x330>
      break;
 8005afa:	bf00      	nop
  }

  return ret;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	885b      	ldrh	r3, [r3, #2]
 8005b22:	0a1b      	lsrs	r3, r3, #8
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	2b06      	cmp	r3, #6
 8005b2a:	f200 8128 	bhi.w	8005d7e <USBD_GetDescriptor+0x276>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <USBD_GetDescriptor+0x2c>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b51 	.word	0x08005b51
 8005b38:	08005b69 	.word	0x08005b69
 8005b3c:	08005ba9 	.word	0x08005ba9
 8005b40:	08005d7f 	.word	0x08005d7f
 8005b44:	08005d7f 	.word	0x08005d7f
 8005b48:	08005d1f 	.word	0x08005d1f
 8005b4c:	08005d4b 	.word	0x08005d4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	7c12      	ldrb	r2, [r2, #16]
 8005b5c:	f107 0108 	add.w	r1, r7, #8
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	60f8      	str	r0, [r7, #12]
      break;
 8005b66:	e112      	b.n	8005d8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	7c1b      	ldrb	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10d      	bne.n	8005b8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f107 0208 	add.w	r2, r7, #8
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	2202      	movs	r2, #2
 8005b88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b8a:	e100      	b.n	8005d8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	f107 0208 	add.w	r2, r7, #8
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4798      	blx	r3
 8005b9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	701a      	strb	r2, [r3, #0]
      break;
 8005ba6:	e0f2      	b.n	8005d8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	885b      	ldrh	r3, [r3, #2]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	f200 80ac 	bhi.w	8005d0c <USBD_GetDescriptor+0x204>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <USBD_GetDescriptor+0xb4>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005bd5 	.word	0x08005bd5
 8005bc0:	08005c09 	.word	0x08005c09
 8005bc4:	08005c3d 	.word	0x08005c3d
 8005bc8:	08005c71 	.word	0x08005c71
 8005bcc:	08005ca5 	.word	0x08005ca5
 8005bd0:	08005cd9 	.word	0x08005cd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	7c12      	ldrb	r2, [r2, #16]
 8005bec:	f107 0108 	add.w	r1, r7, #8
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bf6:	e091      	b.n	8005d1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 facb 	bl	8006196 <USBD_CtlError>
            err++;
 8005c00:	7afb      	ldrb	r3, [r7, #11]
 8005c02:	3301      	adds	r3, #1
 8005c04:	72fb      	strb	r3, [r7, #11]
          break;
 8005c06:	e089      	b.n	8005d1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	7c12      	ldrb	r2, [r2, #16]
 8005c20:	f107 0108 	add.w	r1, r7, #8
 8005c24:	4610      	mov	r0, r2
 8005c26:	4798      	blx	r3
 8005c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c2a:	e077      	b.n	8005d1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fab1 	bl	8006196 <USBD_CtlError>
            err++;
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	3301      	adds	r3, #1
 8005c38:	72fb      	strb	r3, [r7, #11]
          break;
 8005c3a:	e06f      	b.n	8005d1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	7c12      	ldrb	r2, [r2, #16]
 8005c54:	f107 0108 	add.w	r1, r7, #8
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
 8005c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c5e:	e05d      	b.n	8005d1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fa97 	bl	8006196 <USBD_CtlError>
            err++;
 8005c68:	7afb      	ldrb	r3, [r7, #11]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c6e:	e055      	b.n	8005d1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	7c12      	ldrb	r2, [r2, #16]
 8005c88:	f107 0108 	add.w	r1, r7, #8
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c92:	e043      	b.n	8005d1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa7d 	bl	8006196 <USBD_CtlError>
            err++;
 8005c9c:	7afb      	ldrb	r3, [r7, #11]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ca2:	e03b      	b.n	8005d1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	7c12      	ldrb	r2, [r2, #16]
 8005cbc:	f107 0108 	add.w	r1, r7, #8
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cc6:	e029      	b.n	8005d1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa63 	bl	8006196 <USBD_CtlError>
            err++;
 8005cd0:	7afb      	ldrb	r3, [r7, #11]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8005cd6:	e021      	b.n	8005d1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	7c12      	ldrb	r2, [r2, #16]
 8005cf0:	f107 0108 	add.w	r1, r7, #8
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
 8005cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cfa:	e00f      	b.n	8005d1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa49 	bl	8006196 <USBD_CtlError>
            err++;
 8005d04:	7afb      	ldrb	r3, [r7, #11]
 8005d06:	3301      	adds	r3, #1
 8005d08:	72fb      	strb	r3, [r7, #11]
          break;
 8005d0a:	e007      	b.n	8005d1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fa41 	bl	8006196 <USBD_CtlError>
          err++;
 8005d14:	7afb      	ldrb	r3, [r7, #11]
 8005d16:	3301      	adds	r3, #1
 8005d18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005d1a:	bf00      	nop
      }
      break;
 8005d1c:	e037      	b.n	8005d8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7c1b      	ldrb	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	f107 0208 	add.w	r2, r7, #8
 8005d32:	4610      	mov	r0, r2
 8005d34:	4798      	blx	r3
 8005d36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d38:	e029      	b.n	8005d8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fa2a 	bl	8006196 <USBD_CtlError>
        err++;
 8005d42:	7afb      	ldrb	r3, [r7, #11]
 8005d44:	3301      	adds	r3, #1
 8005d46:	72fb      	strb	r3, [r7, #11]
      break;
 8005d48:	e021      	b.n	8005d8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	7c1b      	ldrb	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10d      	bne.n	8005d6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	f107 0208 	add.w	r2, r7, #8
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4798      	blx	r3
 8005d62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	2207      	movs	r2, #7
 8005d6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d6c:	e00f      	b.n	8005d8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fa10 	bl	8006196 <USBD_CtlError>
        err++;
 8005d76:	7afb      	ldrb	r3, [r7, #11]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d7c:	e007      	b.n	8005d8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fa08 	bl	8006196 <USBD_CtlError>
      err++;
 8005d86:	7afb      	ldrb	r3, [r7, #11]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d8c:	bf00      	nop
  }

  if (err != 0U)
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d11e      	bne.n	8005dd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	88db      	ldrh	r3, [r3, #6]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d016      	beq.n	8005dca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	88da      	ldrh	r2, [r3, #6]
 8005da6:	893b      	ldrh	r3, [r7, #8]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	bf28      	it	cs
 8005dac:	4613      	movcs	r3, r2
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005db2:	893b      	ldrh	r3, [r7, #8]
 8005db4:	461a      	mov	r2, r3
 8005db6:	68f9      	ldr	r1, [r7, #12]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa5d 	bl	8006278 <USBD_CtlSendData>
 8005dbe:	e009      	b.n	8005dd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f9e7 	bl	8006196 <USBD_CtlError>
 8005dc8:	e004      	b.n	8005dd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 faae 	bl	800632c <USBD_CtlSendStatus>
 8005dd0:	e000      	b.n	8005dd4 <USBD_GetDescriptor+0x2cc>
    return;
 8005dd2:	bf00      	nop
  }
}
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop

08005ddc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	889b      	ldrh	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d131      	bne.n	8005e52 <USBD_SetAddress+0x76>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	88db      	ldrh	r3, [r3, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d12d      	bne.n	8005e52 <USBD_SetAddress+0x76>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	885b      	ldrh	r3, [r3, #2]
 8005dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfc:	d829      	bhi.n	8005e52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	885b      	ldrh	r3, [r3, #2]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d104      	bne.n	8005e20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f9bc 	bl	8006196 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1e:	e01d      	b.n	8005e5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	7bfa      	ldrb	r2, [r7, #15]
 8005e24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fed5 	bl	8006bdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa7a 	bl	800632c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e46:	e009      	b.n	8005e5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e50:	e004      	b.n	8005e5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f99e 	bl	8006196 <USBD_CtlError>
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	885b      	ldrh	r3, [r3, #2]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	4b4e      	ldr	r3, [pc, #312]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005e7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e7c:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d905      	bls.n	8005e90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f985 	bl	8006196 <USBD_CtlError>
    return USBD_FAIL;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e08c      	b.n	8005faa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d002      	beq.n	8005ea2 <USBD_SetConfig+0x3e>
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d029      	beq.n	8005ef4 <USBD_SetConfig+0x90>
 8005ea0:	e075      	b.n	8005f8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005ea2:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d020      	beq.n	8005eec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005eaa:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005eb4:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fe ffe7 	bl	8004e8e <USBD_SetClassConfig>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d008      	beq.n	8005edc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f962 	bl	8006196 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005eda:	e065      	b.n	8005fa8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fa25 	bl	800632c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005eea:	e05d      	b.n	8005fa8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa1d 	bl	800632c <USBD_CtlSendStatus>
      break;
 8005ef2:	e059      	b.n	8005fa8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ef4:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d112      	bne.n	8005f22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005f04:	4b2b      	ldr	r3, [pc, #172]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f0e:	4b29      	ldr	r3, [pc, #164]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fe ffd6 	bl	8004ec6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa06 	bl	800632c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f20:	e042      	b.n	8005fa8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d02a      	beq.n	8005f86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fe ffc4 	bl	8004ec6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f3e:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f48:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fe ff9d 	bl	8004e8e <USBD_SetClassConfig>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00f      	beq.n	8005f7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f918 	bl	8006196 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fe ffa9 	bl	8004ec6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f7c:	e014      	b.n	8005fa8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9d4 	bl	800632c <USBD_CtlSendStatus>
      break;
 8005f84:	e010      	b.n	8005fa8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f9d0 	bl	800632c <USBD_CtlSendStatus>
      break;
 8005f8c:	e00c      	b.n	8005fa8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f900 	bl	8006196 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f96:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <USBD_SetConfig+0x150>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fe ff92 	bl	8004ec6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa6:	bf00      	nop
  }

  return ret;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	2000011c 	.word	0x2000011c

08005fb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	88db      	ldrh	r3, [r3, #6]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d004      	beq.n	8005fd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f8e2 	bl	8006196 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005fd2:	e023      	b.n	800601c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	dc02      	bgt.n	8005fe6 <USBD_GetConfig+0x2e>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	dc03      	bgt.n	8005fec <USBD_GetConfig+0x34>
 8005fe4:	e015      	b.n	8006012 <USBD_GetConfig+0x5a>
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d00b      	beq.n	8006002 <USBD_GetConfig+0x4a>
 8005fea:	e012      	b.n	8006012 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f93c 	bl	8006278 <USBD_CtlSendData>
        break;
 8006000:	e00c      	b.n	800601c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	2201      	movs	r2, #1
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f934 	bl	8006278 <USBD_CtlSendData>
        break;
 8006010:	e004      	b.n	800601c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f8be 	bl	8006196 <USBD_CtlError>
        break;
 800601a:	bf00      	nop
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006034:	b2db      	uxtb	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	2b02      	cmp	r3, #2
 800603a:	d81e      	bhi.n	800607a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	88db      	ldrh	r3, [r3, #6]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d004      	beq.n	800604e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f8a5 	bl	8006196 <USBD_CtlError>
        break;
 800604c:	e01a      	b.n	8006084 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f043 0202 	orr.w	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	330c      	adds	r3, #12
 800606e:	2202      	movs	r2, #2
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f900 	bl	8006278 <USBD_CtlSendData>
      break;
 8006078:	e004      	b.n	8006084 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f88a 	bl	8006196 <USBD_CtlError>
      break;
 8006082:	bf00      	nop
  }
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d107      	bne.n	80060ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f940 	bl	800632c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80060ac:	e013      	b.n	80060d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	885b      	ldrh	r3, [r3, #2]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d10b      	bne.n	80060ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	889b      	ldrh	r3, [r3, #4]
 80060ba:	0a1b      	lsrs	r3, r3, #8
 80060bc:	b29b      	uxth	r3, r3
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f930 	bl	800632c <USBD_CtlSendStatus>
}
 80060cc:	e003      	b.n	80060d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f860 	bl	8006196 <USBD_CtlError>
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d80b      	bhi.n	800610e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	885b      	ldrh	r3, [r3, #2]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d10c      	bne.n	8006118 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f910 	bl	800632c <USBD_CtlSendStatus>
      }
      break;
 800610c:	e004      	b.n	8006118 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f840 	bl	8006196 <USBD_CtlError>
      break;
 8006116:	e000      	b.n	800611a <USBD_ClrFeature+0x3c>
      break;
 8006118:	bf00      	nop
  }
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3301      	adds	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff fa41 	bl	80055d4 <SWAPBYTE>
 8006152:	4603      	mov	r3, r0
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fa34 	bl	80055d4 <SWAPBYTE>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff fa27 	bl	80055d4 <SWAPBYTE>
 8006186:	4603      	mov	r3, r0
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	80da      	strh	r2, [r3, #6]
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80061a0:	2180      	movs	r1, #128	; 0x80
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fcb0 	bl	8006b08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061a8:	2100      	movs	r1, #0
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fcac 	bl	8006b08 <USBD_LL_StallEP>
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d036      	beq.n	800623c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061d2:	6938      	ldr	r0, [r7, #16]
 80061d4:	f000 f836 	bl	8006244 <USBD_GetLen>
 80061d8:	4603      	mov	r3, r0
 80061da:	3301      	adds	r3, #1
 80061dc:	b29b      	uxth	r3, r3
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4413      	add	r3, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	3301      	adds	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4413      	add	r3, r2
 80061fe:	2203      	movs	r2, #3
 8006200:	701a      	strb	r2, [r3, #0]
  idx++;
 8006202:	7dfb      	ldrb	r3, [r7, #23]
 8006204:	3301      	adds	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006208:	e013      	b.n	8006232 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	4413      	add	r3, r2
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3301      	adds	r3, #1
 800621a:	613b      	str	r3, [r7, #16]
    idx++;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	3301      	adds	r3, #1
 8006220:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4413      	add	r3, r2
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
    idx++;
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	3301      	adds	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e7      	bne.n	800620a <USBD_GetString+0x52>
 800623a:	e000      	b.n	800623e <USBD_GetString+0x86>
    return;
 800623c:	bf00      	nop
  }
}
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006254:	e005      	b.n	8006262 <USBD_GetLen+0x1e>
  {
    len++;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	3301      	adds	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	3301      	adds	r3, #1
 8006260:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f5      	bne.n	8006256 <USBD_GetLen+0x12>
  }

  return len;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2202      	movs	r2, #2
 8006288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	2100      	movs	r1, #0
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fcbb 	bl	8006c1a <USBD_LL_Transmit>

  return USBD_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	2100      	movs	r1, #0
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fcaa 	bl	8006c1a <USBD_LL_Transmit>

  return USBD_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2203      	movs	r2, #3
 80062e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	2100      	movs	r1, #0
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 fcae 	bl	8006c5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	2100      	movs	r1, #0
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fc9d 	bl	8006c5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2204      	movs	r2, #4
 8006338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800633c:	2300      	movs	r3, #0
 800633e:	2200      	movs	r2, #0
 8006340:	2100      	movs	r1, #0
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fc69 	bl	8006c1a <USBD_LL_Transmit>

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2205      	movs	r2, #5
 800635e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc77 	bl	8006c5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800637c:	2200      	movs	r2, #0
 800637e:	4912      	ldr	r1, [pc, #72]	; (80063c8 <MX_USB_DEVICE_Init+0x50>)
 8006380:	4812      	ldr	r0, [pc, #72]	; (80063cc <MX_USB_DEVICE_Init+0x54>)
 8006382:	f7fe fd07 	bl	8004d94 <USBD_Init>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800638c:	f7fa f97a 	bl	8000684 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006390:	490f      	ldr	r1, [pc, #60]	; (80063d0 <MX_USB_DEVICE_Init+0x58>)
 8006392:	480e      	ldr	r0, [pc, #56]	; (80063cc <MX_USB_DEVICE_Init+0x54>)
 8006394:	f7fe fd2e 	bl	8004df4 <USBD_RegisterClass>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800639e:	f7fa f971 	bl	8000684 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80063a2:	490c      	ldr	r1, [pc, #48]	; (80063d4 <MX_USB_DEVICE_Init+0x5c>)
 80063a4:	4809      	ldr	r0, [pc, #36]	; (80063cc <MX_USB_DEVICE_Init+0x54>)
 80063a6:	f7fe fc65 	bl	8004c74 <USBD_CDC_RegisterInterface>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80063b0:	f7fa f968 	bl	8000684 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80063b4:	4805      	ldr	r0, [pc, #20]	; (80063cc <MX_USB_DEVICE_Init+0x54>)
 80063b6:	f7fe fd53 	bl	8004e60 <USBD_Start>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80063c0:	f7fa f960 	bl	8000684 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80063c4:	bf00      	nop
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	200000ac 	.word	0x200000ac
 80063cc:	20000120 	.word	0x20000120
 80063d0:	20000018 	.word	0x20000018
 80063d4:	20000098 	.word	0x20000098

080063d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063dc:	2200      	movs	r2, #0
 80063de:	4905      	ldr	r1, [pc, #20]	; (80063f4 <CDC_Init_FS+0x1c>)
 80063e0:	4805      	ldr	r0, [pc, #20]	; (80063f8 <CDC_Init_FS+0x20>)
 80063e2:	f7fe fc61 	bl	8004ca8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063e6:	4905      	ldr	r1, [pc, #20]	; (80063fc <CDC_Init_FS+0x24>)
 80063e8:	4803      	ldr	r0, [pc, #12]	; (80063f8 <CDC_Init_FS+0x20>)
 80063ea:	f7fe fc7f 	bl	8004cec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	200007fc 	.word	0x200007fc
 80063f8:	20000120 	.word	0x20000120
 80063fc:	200003fc 	.word	0x200003fc

08006400 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006404:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006406:	4618      	mov	r0, r3
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	6039      	str	r1, [r7, #0]
 800641a:	71fb      	strb	r3, [r7, #7]
 800641c:	4613      	mov	r3, r2
 800641e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	2b23      	cmp	r3, #35	; 0x23
 8006424:	d84a      	bhi.n	80064bc <CDC_Control_FS+0xac>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <CDC_Control_FS+0x1c>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	080064bd 	.word	0x080064bd
 8006430:	080064bd 	.word	0x080064bd
 8006434:	080064bd 	.word	0x080064bd
 8006438:	080064bd 	.word	0x080064bd
 800643c:	080064bd 	.word	0x080064bd
 8006440:	080064bd 	.word	0x080064bd
 8006444:	080064bd 	.word	0x080064bd
 8006448:	080064bd 	.word	0x080064bd
 800644c:	080064bd 	.word	0x080064bd
 8006450:	080064bd 	.word	0x080064bd
 8006454:	080064bd 	.word	0x080064bd
 8006458:	080064bd 	.word	0x080064bd
 800645c:	080064bd 	.word	0x080064bd
 8006460:	080064bd 	.word	0x080064bd
 8006464:	080064bd 	.word	0x080064bd
 8006468:	080064bd 	.word	0x080064bd
 800646c:	080064bd 	.word	0x080064bd
 8006470:	080064bd 	.word	0x080064bd
 8006474:	080064bd 	.word	0x080064bd
 8006478:	080064bd 	.word	0x080064bd
 800647c:	080064bd 	.word	0x080064bd
 8006480:	080064bd 	.word	0x080064bd
 8006484:	080064bd 	.word	0x080064bd
 8006488:	080064bd 	.word	0x080064bd
 800648c:	080064bd 	.word	0x080064bd
 8006490:	080064bd 	.word	0x080064bd
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064bd 	.word	0x080064bd
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	080064bd 	.word	0x080064bd
 80064a8:	080064bd 	.word	0x080064bd
 80064ac:	080064bd 	.word	0x080064bd
 80064b0:	080064bd 	.word	0x080064bd
 80064b4:	080064bd 	.word	0x080064bd
 80064b8:	080064bd 	.word	0x080064bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80064bc:	bf00      	nop
  }

  return (USBD_OK);
 80064be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	4805      	ldr	r0, [pc, #20]	; (80064f0 <CDC_Receive_FS+0x24>)
 80064da:	f7fe fc07 	bl	8004cec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064de:	4804      	ldr	r0, [pc, #16]	; (80064f0 <CDC_Receive_FS+0x24>)
 80064e0:	f7fe fc22 	bl	8004d28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80064e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000120 	.word	0x20000120

080064f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800650a:	4618      	mov	r0, r3
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	6039      	str	r1, [r7, #0]
 8006522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2212      	movs	r2, #18
 8006528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800652a:	4b03      	ldr	r3, [pc, #12]	; (8006538 <USBD_FS_DeviceDescriptor+0x20>)
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	200000c8 	.word	0x200000c8

0800653c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	6039      	str	r1, [r7, #0]
 8006546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2204      	movs	r2, #4
 800654c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800654e:	4b03      	ldr	r3, [pc, #12]	; (800655c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	200000dc 	.word	0x200000dc

08006560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	6039      	str	r1, [r7, #0]
 800656a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d105      	bne.n	800657e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	4907      	ldr	r1, [pc, #28]	; (8006594 <USBD_FS_ProductStrDescriptor+0x34>)
 8006576:	4808      	ldr	r0, [pc, #32]	; (8006598 <USBD_FS_ProductStrDescriptor+0x38>)
 8006578:	f7ff fe1e 	bl	80061b8 <USBD_GetString>
 800657c:	e004      	b.n	8006588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	4904      	ldr	r1, [pc, #16]	; (8006594 <USBD_FS_ProductStrDescriptor+0x34>)
 8006582:	4805      	ldr	r0, [pc, #20]	; (8006598 <USBD_FS_ProductStrDescriptor+0x38>)
 8006584:	f7ff fe18 	bl	80061b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006588:	4b02      	ldr	r3, [pc, #8]	; (8006594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000bfc 	.word	0x20000bfc
 8006598:	08006dbc 	.word	0x08006dbc

0800659c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	6039      	str	r1, [r7, #0]
 80065a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	4904      	ldr	r1, [pc, #16]	; (80065bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80065ac:	4804      	ldr	r0, [pc, #16]	; (80065c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80065ae:	f7ff fe03 	bl	80061b8 <USBD_GetString>
  return USBD_StrDesc;
 80065b2:	4b02      	ldr	r3, [pc, #8]	; (80065bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20000bfc 	.word	0x20000bfc
 80065c0:	08006dc8 	.word	0x08006dc8

080065c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	6039      	str	r1, [r7, #0]
 80065ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	221a      	movs	r2, #26
 80065d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065d6:	f000 f843 	bl	8006660 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80065da:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200000e0 	.word	0x200000e0

080065e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	6039      	str	r1, [r7, #0]
 80065f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d105      	bne.n	8006606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	4907      	ldr	r1, [pc, #28]	; (800661c <USBD_FS_ConfigStrDescriptor+0x34>)
 80065fe:	4808      	ldr	r0, [pc, #32]	; (8006620 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006600:	f7ff fdda 	bl	80061b8 <USBD_GetString>
 8006604:	e004      	b.n	8006610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	4904      	ldr	r1, [pc, #16]	; (800661c <USBD_FS_ConfigStrDescriptor+0x34>)
 800660a:	4805      	ldr	r0, [pc, #20]	; (8006620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800660c:	f7ff fdd4 	bl	80061b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006610:	4b02      	ldr	r3, [pc, #8]	; (800661c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000bfc 	.word	0x20000bfc
 8006620:	08006ddc 	.word	0x08006ddc

08006624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	6039      	str	r1, [r7, #0]
 800662e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d105      	bne.n	8006642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	4907      	ldr	r1, [pc, #28]	; (8006658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800663a:	4808      	ldr	r0, [pc, #32]	; (800665c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800663c:	f7ff fdbc 	bl	80061b8 <USBD_GetString>
 8006640:	e004      	b.n	800664c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	4904      	ldr	r1, [pc, #16]	; (8006658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006646:	4805      	ldr	r0, [pc, #20]	; (800665c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006648:	f7ff fdb6 	bl	80061b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800664c:	4b02      	ldr	r3, [pc, #8]	; (8006658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000bfc 	.word	0x20000bfc
 800665c:	08006de8 	.word	0x08006de8

08006660 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006666:	4b0f      	ldr	r3, [pc, #60]	; (80066a4 <Get_SerialNum+0x44>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800666c:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <Get_SerialNum+0x48>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006672:	4b0e      	ldr	r3, [pc, #56]	; (80066ac <Get_SerialNum+0x4c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006686:	2208      	movs	r2, #8
 8006688:	4909      	ldr	r1, [pc, #36]	; (80066b0 <Get_SerialNum+0x50>)
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 f814 	bl	80066b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006690:	2204      	movs	r2, #4
 8006692:	4908      	ldr	r1, [pc, #32]	; (80066b4 <Get_SerialNum+0x54>)
 8006694:	68b8      	ldr	r0, [r7, #8]
 8006696:	f000 f80f 	bl	80066b8 <IntToUnicode>
  }
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	1fff7a10 	.word	0x1fff7a10
 80066a8:	1fff7a14 	.word	0x1fff7a14
 80066ac:	1fff7a18 	.word	0x1fff7a18
 80066b0:	200000e2 	.word	0x200000e2
 80066b4:	200000f2 	.word	0x200000f2

080066b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	75fb      	strb	r3, [r7, #23]
 80066ce:	e027      	b.n	8006720 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	0f1b      	lsrs	r3, r3, #28
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	d80b      	bhi.n	80066f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	0f1b      	lsrs	r3, r3, #28
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	4619      	mov	r1, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	440b      	add	r3, r1
 80066e8:	3230      	adds	r2, #48	; 0x30
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e00a      	b.n	8006706 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	0f1b      	lsrs	r3, r3, #28
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	4619      	mov	r1, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	440b      	add	r3, r1
 8006700:	3237      	adds	r2, #55	; 0x37
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	3301      	adds	r3, #1
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4413      	add	r3, r2
 8006716:	2200      	movs	r2, #0
 8006718:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	3301      	adds	r3, #1
 800671e:	75fb      	strb	r3, [r7, #23]
 8006720:	7dfa      	ldrb	r2, [r7, #23]
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	429a      	cmp	r2, r3
 8006726:	d3d3      	bcc.n	80066d0 <IntToUnicode+0x18>
  }
}
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08a      	sub	sp, #40	; 0x28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006740:	f107 0314 	add.w	r3, r7, #20
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	609a      	str	r2, [r3, #8]
 800674c:	60da      	str	r2, [r3, #12]
 800674e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006758:	d13a      	bne.n	80067d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <HAL_PCD_MspInit+0xa0>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	4a1d      	ldr	r2, [pc, #116]	; (80067d8 <HAL_PCD_MspInit+0xa0>)
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	6313      	str	r3, [r2, #48]	; 0x30
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <HAL_PCD_MspInit+0xa0>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006776:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800677a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800677c:	2302      	movs	r3, #2
 800677e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006780:	2300      	movs	r3, #0
 8006782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006784:	2303      	movs	r3, #3
 8006786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006788:	230a      	movs	r3, #10
 800678a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800678c:	f107 0314 	add.w	r3, r7, #20
 8006790:	4619      	mov	r1, r3
 8006792:	4812      	ldr	r0, [pc, #72]	; (80067dc <HAL_PCD_MspInit+0xa4>)
 8006794:	f7fa f9bc 	bl	8000b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006798:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <HAL_PCD_MspInit+0xa0>)
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679c:	4a0e      	ldr	r2, [pc, #56]	; (80067d8 <HAL_PCD_MspInit+0xa0>)
 800679e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a2:	6353      	str	r3, [r2, #52]	; 0x34
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_PCD_MspInit+0xa0>)
 80067aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ac:	4a0a      	ldr	r2, [pc, #40]	; (80067d8 <HAL_PCD_MspInit+0xa0>)
 80067ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067b2:	6453      	str	r3, [r2, #68]	; 0x44
 80067b4:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <HAL_PCD_MspInit+0xa0>)
 80067b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80067c0:	2200      	movs	r2, #0
 80067c2:	2100      	movs	r1, #0
 80067c4:	2043      	movs	r0, #67	; 0x43
 80067c6:	f7fa f96c 	bl	8000aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80067ca:	2043      	movs	r0, #67	; 0x43
 80067cc:	f7fa f985 	bl	8000ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80067d0:	bf00      	nop
 80067d2:	3728      	adds	r7, #40	; 0x28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40023800 	.word	0x40023800
 80067dc:	40020000 	.word	0x40020000

080067e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067f4:	4619      	mov	r1, r3
 80067f6:	4610      	mov	r0, r2
 80067f8:	f7fe fb7f 	bl	8004efa <USBD_LL_SetupStage>
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	4619      	mov	r1, r3
 800682e:	f7fe fbb9 	bl	8004fa4 <USBD_LL_DataOutStage>
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	334c      	adds	r3, #76	; 0x4c
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	4619      	mov	r1, r3
 8006862:	f7fe fc52 	bl	800510a <USBD_LL_DataInStage>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fd86 	bl	800538e <USBD_LL_SOF>
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006892:	2301      	movs	r3, #1
 8006894:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d001      	beq.n	80068a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800689e:	f7f9 fef1 	bl	8000684 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068a8:	7bfa      	ldrb	r2, [r7, #15]
 80068aa:	4611      	mov	r1, r2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe fd30 	bl	8005312 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fcd8 	bl	800526e <USBD_LL_Reset>
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fd2b 	bl	8005332 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6812      	ldr	r2, [r2, #0]
 80068ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068fc:	4b04      	ldr	r3, [pc, #16]	; (8006910 <HAL_PCD_SuspendCallback+0x48>)
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	4a03      	ldr	r2, [pc, #12]	; (8006910 <HAL_PCD_SuspendCallback+0x48>)
 8006902:	f043 0306 	orr.w	r3, r3, #6
 8006906:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	e000ed00 	.word	0xe000ed00

08006914 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fd1b 	bl	800535e <USBD_LL_Resume>
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fd73 	bl	8005432 <USBD_LL_IsoOUTIncomplete>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	4611      	mov	r1, r2
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fd2f 	bl	80053ce <USBD_LL_IsoINIncomplete>
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe fd85 	bl	8005496 <USBD_LL_DevConnected>
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fd82 	bl	80054ac <USBD_LL_DevDisconnected>
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d13c      	bne.n	8006a3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80069c0:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <USBD_LL_Init+0x94>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a1e      	ldr	r2, [pc, #120]	; (8006a44 <USBD_LL_Init+0x94>)
 80069cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069d0:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <USBD_LL_Init+0x94>)
 80069d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80069d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80069d8:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <USBD_LL_Init+0x94>)
 80069da:	2204      	movs	r2, #4
 80069dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069de:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <USBD_LL_Init+0x94>)
 80069e0:	2202      	movs	r2, #2
 80069e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069e4:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <USBD_LL_Init+0x94>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069ea:	4b16      	ldr	r3, [pc, #88]	; (8006a44 <USBD_LL_Init+0x94>)
 80069ec:	2202      	movs	r2, #2
 80069ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069f0:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <USBD_LL_Init+0x94>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069f6:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <USBD_LL_Init+0x94>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069fc:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <USBD_LL_Init+0x94>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006a02:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <USBD_LL_Init+0x94>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a08:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <USBD_LL_Init+0x94>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a0e:	480d      	ldr	r0, [pc, #52]	; (8006a44 <USBD_LL_Init+0x94>)
 8006a10:	f7fa fa35 	bl	8000e7e <HAL_PCD_Init>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006a1a:	f7f9 fe33 	bl	8000684 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006a1e:	2180      	movs	r1, #128	; 0x80
 8006a20:	4808      	ldr	r0, [pc, #32]	; (8006a44 <USBD_LL_Init+0x94>)
 8006a22:	f7fb fc8c 	bl	800233e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4806      	ldr	r0, [pc, #24]	; (8006a44 <USBD_LL_Init+0x94>)
 8006a2c:	f7fb fc40 	bl	80022b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a30:	2280      	movs	r2, #128	; 0x80
 8006a32:	2101      	movs	r1, #1
 8006a34:	4803      	ldr	r0, [pc, #12]	; (8006a44 <USBD_LL_Init+0x94>)
 8006a36:	f7fb fc3b 	bl	80022b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20000dfc 	.word	0x20000dfc

08006a48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fa fb2a 	bl	80010b8 <HAL_PCD_Start>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 f942 	bl	8006cf4 <USBD_Get_USB_Status>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	4608      	mov	r0, r1
 8006a88:	4611      	mov	r1, r2
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	70fb      	strb	r3, [r7, #3]
 8006a90:	460b      	mov	r3, r1
 8006a92:	70bb      	strb	r3, [r7, #2]
 8006a94:	4613      	mov	r3, r2
 8006a96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006aa6:	78bb      	ldrb	r3, [r7, #2]
 8006aa8:	883a      	ldrh	r2, [r7, #0]
 8006aaa:	78f9      	ldrb	r1, [r7, #3]
 8006aac:	f7fa fffb 	bl	8001aa6 <HAL_PCD_EP_Open>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 f91c 	bl	8006cf4 <USBD_Get_USB_Status>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ae4:	78fa      	ldrb	r2, [r7, #3]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fb f844 	bl	8001b76 <HAL_PCD_EP_Close>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 f8fd 	bl	8006cf4 <USBD_Get_USB_Status>
 8006afa:	4603      	mov	r3, r0
 8006afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b22:	78fa      	ldrb	r2, [r7, #3]
 8006b24:	4611      	mov	r1, r2
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fb f91c 	bl	8001d64 <HAL_PCD_EP_SetStall>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 f8de 	bl	8006cf4 <USBD_Get_USB_Status>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b60:	78fa      	ldrb	r2, [r7, #3]
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fb f961 	bl	8001e2c <HAL_PCD_EP_ClrStall>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 f8bf 	bl	8006cf4 <USBD_Get_USB_Status>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da0b      	bge.n	8006bb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	333e      	adds	r3, #62	; 0x3e
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	e00b      	b.n	8006bd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006bce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fa ff2e 	bl	8001a5c <HAL_PCD_SetAddress>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f874 	bl	8006cf4 <USBD_Get_USB_Status>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b086      	sub	sp, #24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	460b      	mov	r3, r1
 8006c28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c38:	7af9      	ldrb	r1, [r7, #11]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	f7fb f847 	bl	8001cd0 <HAL_PCD_EP_Transmit>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 f853 	bl	8006cf4 <USBD_Get_USB_Status>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c52:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c7a:	7af9      	ldrb	r1, [r7, #11]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	f7fa ffc3 	bl	8001c0a <HAL_PCD_EP_Receive>
 8006c84:	4603      	mov	r3, r0
 8006c86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 f832 	bl	8006cf4 <USBD_Get_USB_Status>
 8006c90:	4603      	mov	r3, r0
 8006c92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c94:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fa fff3 	bl	8001ca0 <HAL_PCD_EP_GetRxCount>
 8006cba:	4603      	mov	r3, r0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006ccc:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <USBD_static_malloc+0x18>)
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20001308 	.word	0x20001308

08006ce0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d817      	bhi.n	8006d38 <USBD_Get_USB_Status+0x44>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <USBD_Get_USB_Status+0x1c>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d21 	.word	0x08006d21
 8006d14:	08006d27 	.word	0x08006d27
 8006d18:	08006d2d 	.word	0x08006d2d
 8006d1c:	08006d33 	.word	0x08006d33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
    break;
 8006d24:	e00b      	b.n	8006d3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d26:	2303      	movs	r3, #3
 8006d28:	73fb      	strb	r3, [r7, #15]
    break;
 8006d2a:	e008      	b.n	8006d3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d30:	e005      	b.n	8006d3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d32:	2303      	movs	r3, #3
 8006d34:	73fb      	strb	r3, [r7, #15]
    break;
 8006d36:	e002      	b.n	8006d3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d3c:	bf00      	nop
  }
  return usb_status;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <memset>:
 8006d4c:	4402      	add	r2, r0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d100      	bne.n	8006d56 <memset+0xa>
 8006d54:	4770      	bx	lr
 8006d56:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5a:	e7f9      	b.n	8006d50 <memset+0x4>

08006d5c <__libc_init_array>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	4d0d      	ldr	r5, [pc, #52]	; (8006d94 <__libc_init_array+0x38>)
 8006d60:	4c0d      	ldr	r4, [pc, #52]	; (8006d98 <__libc_init_array+0x3c>)
 8006d62:	1b64      	subs	r4, r4, r5
 8006d64:	10a4      	asrs	r4, r4, #2
 8006d66:	2600      	movs	r6, #0
 8006d68:	42a6      	cmp	r6, r4
 8006d6a:	d109      	bne.n	8006d80 <__libc_init_array+0x24>
 8006d6c:	4d0b      	ldr	r5, [pc, #44]	; (8006d9c <__libc_init_array+0x40>)
 8006d6e:	4c0c      	ldr	r4, [pc, #48]	; (8006da0 <__libc_init_array+0x44>)
 8006d70:	f000 f818 	bl	8006da4 <_init>
 8006d74:	1b64      	subs	r4, r4, r5
 8006d76:	10a4      	asrs	r4, r4, #2
 8006d78:	2600      	movs	r6, #0
 8006d7a:	42a6      	cmp	r6, r4
 8006d7c:	d105      	bne.n	8006d8a <__libc_init_array+0x2e>
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d84:	4798      	blx	r3
 8006d86:	3601      	adds	r6, #1
 8006d88:	e7ee      	b.n	8006d68 <__libc_init_array+0xc>
 8006d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d8e:	4798      	blx	r3
 8006d90:	3601      	adds	r6, #1
 8006d92:	e7f2      	b.n	8006d7a <__libc_init_array+0x1e>
 8006d94:	08006e10 	.word	0x08006e10
 8006d98:	08006e10 	.word	0x08006e10
 8006d9c:	08006e10 	.word	0x08006e10
 8006da0:	08006e14 	.word	0x08006e14

08006da4 <_init>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr

08006db0 <_fini>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr
